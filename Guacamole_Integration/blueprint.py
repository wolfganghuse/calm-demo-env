# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_LOCAL_PASSWORD = read_local_file("BP_CRED_LOCAL_PASSWORD")
BP_CRED_GuacamoleCredential_PASSWORD = read_local_file(
    "BP_CRED_GuacamoleCredential_PASSWORD"
)

# Credentials
BP_CRED_LOCAL = basic_cred(
    "administrator",
    BP_CRED_LOCAL_PASSWORD,
    name="LOCAL",
    type="PASSWORD",
    default=True,
)
BP_CRED_GuacamoleCredential = basic_cred(
    "guacadmin",
    BP_CRED_GuacamoleCredential_PASSWORD,
    name="GuacamoleCredential",
    type="PASSWORD",
)


class VDIService(Service):

    ParentGroup = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    authToken = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    GroupIdentifier = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    VDIUser = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    VDIPass = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    ConnectionIdentifier = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.SetVariable.escript(
            name="AddConnection",
            filename=os.path.join(
                "scripts", "Service_VDIService_Action___create___Task_AddConnection.py"
            ),
            target=ref(VDIService),
            variables=["ConnectionIdentifier"],
        )
        CalmTask.Exec.escript(
            name="AssignUser",
            filename=os.path.join(
                "scripts", "Service_VDIService_Action___create___Task_AssignUser.py"
            ),
            target=ref(VDIService),
        )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        CalmTask.Exec.escript(
            name="RemoveGroup",
            filename=os.path.join(
                "scripts", "Service_VDIService_Action___delete___Task_RemoveGroup.py"
            ),
            target=ref(VDIService),
        )
        CalmTask.Exec.escript(
            name="DeleteUser",
            filename=os.path.join(
                "scripts", "Service_VDIService_Action___delete___Task_DeleteUser.py"
            ),
            target=ref(VDIService),
        )


class SessionNamecalm_array_indexResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join(
            "specs", "SessionNamecalm_array_index_sysprep_unattend_xml.xml"
        )
    )


class SessionNamecalm_array_index(AhvVm):

    name = "@@{SessionName}@@@@{calm_array_index}@@"
    resources = SessionNamecalm_array_indexResources


class VDISeat(Substrate):

    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = SessionNamecalm_array_index
    provider_spec_editables = read_spec(
        os.path.join("specs", "VDISeat_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=False,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_LOCAL),
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="GetToken",
            filename=os.path.join(
                "scripts", "Substrate_VDISeat_Action___pre_create___Task_GetToken.py"
            ),
            target=ref(VDISeat),
            variables=["authToken"],
        )
        CalmTask.SetVariable.escript(
            name="GetParentGroup",
            filename=os.path.join(
                "scripts",
                "Substrate_VDISeat_Action___pre_create___Task_GetParentGroup.py",
            ),
            target=ref(VDISeat),
            variables=["ParentGroup"],
        )
        CalmTask.SetVariable.escript(
            name="CreateChildGroup",
            filename=os.path.join(
                "scripts",
                "Substrate_VDISeat_Action___pre_create___Task_CreateChildGroup.py",
            ),
            target=ref(VDISeat),
            variables=["GroupIdentifier"],
        )
        CalmTask.SetVariable.escript(
            name="CreateUser",
            filename=os.path.join(
                "scripts", "Substrate_VDISeat_Action___pre_create___Task_CreateUser.py"
            ),
            target=ref(VDISeat),
            variables=["VDIUser", "VDIPass"],
        )


class Package1(Package):

    services = [ref(VDIService)]


class _36d8fca6_deployment(Deployment):

    name = "36d8fca6_deployment"
    min_replicas = "@@{DesktopCount}@@"
    max_replicas = "@@{DesktopCount}@@"

    packages = [ref(Package1)]
    substrate = ref(VDISeat)


class Default(Profile):

    deployments = [_36d8fca6_deployment]

    GuacamoleGroup = CalmVariable.Simple(
        "CalmManaged",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="New Deployments will be added under this group, must exist.",
    )

    SessionName = CalmVariable.Simple(
        "Schulung",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="Name of Desktop Session, used for VM-Prefix, User-Prefix, etc",
    )

    DesktopCount = CalmVariable.Simple.int(
        "4",
        label="",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="Number of Desktops to be provisioned",
    )

    Guacamole_IP = CalmVariable.Simple(
        "172.23.61.44",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    GroupIdentifier = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    BaseImage = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_BaseImage_Task_SampleTask.py"
            ),
        ),
        label="",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )


class GuacamoleIntegration(Blueprint):
    """Provides VDI-Desktops and assigns them to a GuacamoleBroker"""

    services = [VDIService]
    packages = [Package1]
    substrates = [VDISeat]
    profiles = [Default]
    credentials = [BP_CRED_LOCAL, BP_CRED_GuacamoleCredential]
