{"status":{},"contains_secrets":true,"product_version":"3.2.1","spec":{"description":"","resources":{"client_attrs":{"75513331_deployment":{"y":74.5485670367,"x":341.691094787},"d8787620_deployment":{"y":62.0485687256,"x":719.4411010742}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0718a6f4_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"2d048365_runbook","main_task_local_reference":{"kind":"app_task","name":"0718a6f4_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"207b7498_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14175962_runbook","main_task_local_reference":{"kind":"app_task","name":"207b7498_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"38f29b38_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7aa59085_runbook","main_task_local_reference":{"kind":"app_task","name":"38f29b38_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5945d19c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14c892f3_runbook","main_task_local_reference":{"kind":"app_task","name":"5945d19c_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2c2933cb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14058f6e_runbook","main_task_local_reference":{"kind":"app_task","name":"2c2933cb_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Kubernetes","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"172.23.0.5","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"KUBECONFIG","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"K8S_TASK_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"K8S_CLUSTER_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"OS_FLAVOR","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"IMAGE_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SUBNET_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CLUSTER_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"COOKIES","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CREATE_CLUSTER","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1ConfKubeconfig"},{"kind":"app_task","name":"2ConfServiceAccount"},{"kind":"app_task","name":"3InstallMetalLB"},{"kind":"app_task","name":"4InstallHelm"},{"kind":"app_task","name":"5InstallKarbonctl"},{"kind":"app_task","name":"6Karbonctl_Login"}],"name":"98fcebe8_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1ConfKubeconfig"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2ConfServiceAccount"}},{"from_task_reference":{"kind":"app_task","name":"2ConfServiceAccount"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3InstallMetalLB"}},{"from_task_reference":{"kind":"app_task","name":"3InstallMetalLB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4InstallHelm"}},{"from_task_reference":{"kind":"app_task","name":"4InstallHelm"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5InstallKarbonctl"}},{"from_task_reference":{"kind":"app_task","name":"5InstallKarbonctl"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6Karbonctl_Login"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1ConfKubeconfig","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Install kubectl\ncurl -LO https:\/\/storage.googleapis.com\/kubernetes-release\/release\/`curl -s https:\/\/storage.googleapis.com\/kubernetes-release\/release\/stable.txt`\/bin\/linux\/amd64\/kubectl\nchmod +x .\/kubectl\nsudo mv .\/kubectl \/usr\/local\/bin\/kubectl\n\n# Create kubeconfig\nmkdir ~\/.kube\necho '@@{Kubernetes.KUBECONFIG}@@' | base64 --decode > ~\/.kube\/config\n\n# Validate kubeconfig\nkubectl version\nkubectl get nodes","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2ConfServiceAccount","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\nACCOUNT=workstation\ncd ~\/\nkubectl create serviceaccount $ACCOUNT\ncat << EOF > $ACCOUNT-rb.yaml\napiVersion: rbac.authorization.k8s.io\/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: $ACCOUNT-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: $ACCOUNT\n  namespace: default\nEOF\nkubectl create -f $ACCOUNT-rb.yaml\nTOKEN=$(kubectl get secrets $(kubectl get serviceaccounts $ACCOUNT -o jsonpath={.secrets[].name}) -o jsonpath={.data.token} | base64 --decode)\nCLUSTER=$(kubectl config view --minify -o jsonpath='{.clusters[].name}')\nkubectl config set-credentials $ACCOUNT --token=$TOKEN\nkubectl config set-context $ACCOUNT-context --cluster $CLUSTER --user $ACCOUNT\nkubectl config use-context $ACCOUNT-context\n\n#sed \"s\/    token:.*\/    token: `kubectl get secrets $(kubectl get serviceaccounts workstation -o jsonpath={.secrets[].name}) -o jsonpath={.data.token} | base64 --decode`\/g\" ~\/.kube\/config > ~\/.kube\/configsa\n#mv ~\/.kube\/config ~\/.kube\/tokenconfig\n#mv ~\/.kube\/configsa ~\/.kube\/config","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3InstallMetalLB","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Install the manifests\nkubectl apply -f https:\/\/raw.githubusercontent.com\/metallb\/metallb\/v0.9.3\/manifests\/namespace.yaml\nkubectl apply -f https:\/\/raw.githubusercontent.com\/metallb\/metallb\/v0.9.3\/manifests\/metallb.yaml\nkubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=\"$(openssl rand -base64 128)\"\n\n# Install the config map\ncat << EOF > metallb-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - @@{MetalLB_Range}@@\nEOF\nkubectl apply -f metallb-config.yaml","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4InstallHelm","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Install helm\ncurl -fsSL -o get_helm.sh https:\/\/raw.githubusercontent.com\/helm\/helm\/master\/scripts\/get-helm-3\nchmod 700 get_helm.sh\nsh get_helm.sh\n\n# Validate install\nhelm version\nhelm search hub wordpress\n\n# Configure repos\n# helm repo add stable https:\/\/kubernetes-charts.storage.googleapis.com\nhelm repo add stable https:\/\/charts.helm.sh\/stable\nhelm repo add bitnami https:\/\/charts.bitnami.com\/bitnami\nhelm repo update","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5InstallKarbonctl","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Download karbonctl\nsudo wget -O \/usr\/local\/bin\/karbonctl https:\/\/storage.googleapis.com\/testdrive-templates\/library\/release\/karbon\/karbonctl\nsudo chmod 775 \/usr\/local\/bin\/karbonctl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6Karbonctl_Login","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"34b468e7_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"ed7fe359_runbook","main_task_local_reference":{"kind":"app_task","name":"98fcebe8_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"198d1096_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b7aa8f52_runbook","main_task_local_reference":{"kind":"app_task","name":"198d1096_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b92aac93_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a137f4c8_runbook","main_task_local_reference":{"kind":"app_task","name":"b92aac93_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5feb3534_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"939ea4f0_runbook","main_task_local_reference":{"kind":"app_task","name":"5feb3534_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"73a2c4f3_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"eb279a1d_runbook","main_task_local_reference":{"kind":"app_task","name":"73a2c4f3_dag"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"KarbonctlLogin"}],"name":"c1c165cb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"KarbonctlLogin","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Run the karbonctl login command\nkarbonctl login --pc-username @@{PC_Creds.username}@@ --pc-password @@{PC_Creds.secret}@@ --pc-ip @@{Kubernetes.PC_IP}@@","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"34b468e7_runbook","main_task_local_reference":{"kind":"app_task","name":"c1c165cb_dag"},"variable_list":[]},"name":"Karbonctl_Login"}],"depends_on_list":[],"name":"Workstation","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"532cd95d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3f26981f_runbook","main_task_local_reference":{"kind":"app_task","name":"532cd95d_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1157c0d5_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0aea7f30_runbook","main_task_local_reference":{"kind":"app_task","name":"1157c0d5_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"EXISTING_VM","name":"Karbon_Kubernetes","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"PC_Creds"}},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"localhost"},"variable_list":[]},{"description":"","action_list":[],"type":"AHV_VM","name":"Workstation_AHV","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"workstation-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"default-net","uuid":"f49f0c46-7872-475a-9a61-562b54d735df"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nusers:\n  - name: centos\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"8c653f4f-a61c-4000-8ed2-e372f7bc5205","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"CentOS_7_Cloud","uuid":"43f594be-5ddf-46e0-8767-929214c2b6ee"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"wolfgang@ntnx.test","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"FzvEPLZyzVEPlvT1B1X8orBTEra7gEafhyez0IwgrNRsc6pfV6zaiXip4cc=:utf-8"},"name":"PE_Creds"},{"username":"wolfgang@ntnx.test","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"0x4TL3xeEQuLOf3wMDOheNrIYKbG5MlN5o3zas5BYlwOZfcAEjTV9Oh184M=:utf-8"},"name":"PC_Creds"},{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"kD78pBE6ACbEnWI1FRS1Sk3rnQWjO\/vq9KJ6258AvJyAa34wDHWzHyLGkEnxwmk9tmv3MIbQdpJJ1aytDxp3zJCfG+ZbCGuJUn\/OVMu1yqqbO2iZTudFDzvAWZuwk5piolIskXvoEY9jLQqeJNIfmLclQRgmhg9IbUm8m3FRNBrZgpdG9zxAVSGNpNECo1xLs98n27CO+c0j\/cTTopTE7cyacPduWbO71GWaACjpCA63Fod3ttfeUvPaIopYGgX70QP\/BJT9TOtEn1ezDxKhQU9fy3HeoB4DFvCY6n7zwKfBy4tsGsYX6NtCLAFKOPUNoWc22KuLeNLBvdhtC73o7o8QnJ8vcBhZoLWlN2uxcKH6pddPG5OG7D88sAYZY\/V5IBJiwjKri+zBwU9Hkp4+qTB1pMICSZS9gdN1U0qAYbuIJov7njOLlkWeLTXnRpQN3RPmaPzXDcJcRhIQw9y3Q9BRAZzuNX5gcI1KhmHgyXernmO5cXsHt2K94ZoVGafDUCVMXPxngtm\/D3SlZx4DGLAlBzWtB4\/ZVoInX9g+9Xm+BbqRFFlQg65J2RgWX6ksEo\/qnjIgiS4aHF8aVw5USW1uimDeVy3kBbQF6eNzR3gnaqGjJ2msGHzK4GRGhK6ZZWRi5AiZ89UXZ1mSCGaErCSoQOVe8YLTSm2ke7plcSfu3Kum5rTYVb1zUP926d6kYeOc92lVZdfuuyZMvYiV0UexJiY196FK4BE5VeUYIV\/NAL07JeaO+oBErALEJGIvCst4+FUUSY0yeOU8HA8zO8RWnejNBnlY2W7C5uK7qeMbG2TwqBbK567cjD4wN8l\/aFzSDRoIIrFTrRZ+0Re9Oj4yITx3vGGfUiTwa8yRrJ7pLoIjHoua2oQWNNxGehGRu5kvW5bDnCM1ApfRDSqtnchgs3ctRjgpotxo76VA\/VsDzqLJqV8\/Z9HOTafuHNOL\/JyUVlzILHRD7gdkP8OdrkWhViRYY3m9lYO6TNlsWumZxGtenUX3DSZGwijDViWRUpU0QQUV+q1eLM38KvSwQzwPGedCpFmteYo72qrv4OwecZOLcXQBsfz2p\/BeHA3d0G1XfwEKIZwTiR85t6mIFGxw95BZHbGm3z\/q5vq\/S21oyr5Kuhz5YOR6uu7bidRXuUq5NkFD+XNoxvwjSr4G90cW1i8Unke0CKbSZHohZDw4nxclqCqrqKpWJgHtAemo+HQ7cFOZ\/\/Qsn73qjcX5qAU0\/\/+pTFX9i8MuE8Jqw3TB0i1ie3jXL8B7UkMdPFj6i7DHt2WJHkC+0E4lHe2TrFfKmHyfbMvdQHsTZhPJ4M1aEe5IK8iWw\/WLOTGarxzW3pzpdOBTfaafg00fpgIQIRxQpLemEt48HFJeRs7dD\/wo9FyQZ1TDtmZOlxrqFhnhQwazA06knyxA1rAZr0MK13ybFAHKzX68dndtYBPPqJzLok\/rH8cHqFqZkGHjuFT3iRG1sM\/MNIz2doWks8bgjOs0uBna\/0HTnLDpsv4d2X\/Bju\/9gHKkKHLisalhNAapK+8QARmIBulPaP67zNaOtdIaUqWIX9kUYrw+8wVKrqqk05GNiuf\/YI7Rz1UP1qMfvsinZ6Ra35Hj7RDhh9ry+HDFusLirC\/HZ8tYsBE\/inI3OlGRKv3CnMbbNlWe\/H6UFWadrFRVf2xqrTTdj6UdGUdil3W5aP6axVEUrddm83HXrwm+wAsL1kukPLp2nUbrYzbJh+shBf6Tqy\/WSM\/ql2WSshJRz5KDweYgw7m7v02msAkgk+SllqX\/1WWn9DF4Wf3n3rvg0a1xRBig\/gjhDqztwNF6Gj1yRIKfDJXrC2f+3Wo1HFASEP8U\/5ZyaFOTFis7qhNE7aiUNqGaRkvCYuwBn0GCdrbSJttpEu6W\/vlnS+ufvGlP\/blNrnDs6cyOsIa1xpWDM5WtC1ObFyO7N4eLlShvceGki2E3i4AZHItlF0ZPTwVvj7MUY294OA6Ips\/Q0TX5vaQdbdUth5RX9r5QrBZ+ZQ3hGe2AA3kKrU\/Hmt99fjm6m6nSO\/Wu\/S1ANOqD3hcDgekpsn4pwx425it+eOffbO1vJmV9zuTS2cUz2QNsCC8Ux6skSbxP4otM5MmvCdQsTmeTOYL46nw7ogK5ylaKS6RPadtHmUfWML4VB7PbJZPr9IrkaGNtqf\/xgArDJDOcb+raq12u9nMvidkhgCHEqlJJ7XzWiZTgQAPp3UQh4ldOopA+fCi4CvQ+9R8RG4ayRZkmG9zLBa\/nlgPUYDbLoX9ITH22KEVBe6muoFIJtlHsAgP6sUhAnV\/PysZz0mX+MSuhSAKgMeArmBNP6mGOaTaIeLhGJAIG1WzPzn1AWhnM8HYcM55t3u50Aqj0Pn\/7NWOafSsKbgoApINccde1DEhykM9W1G9BadA4bKzNsUx\/UD3WXsW2zryCBM93s9ICSoiXkWWiw3Z3oSBodinFAr4FGASyClsT:utf-8"},"name":"CENTOS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Kubernetes"}],"name":"Kubernetes_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Kubernetes_Package"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1GetCookies"},{"kind":"app_task","name":"2GetOSFlavor"},{"kind":"app_task","name":"3GetImageUUID"},{"kind":"app_task","name":"4GetSubnetUUID"},{"kind":"app_task","name":"5GetClusterUUID"},{"kind":"app_task","name":"7CheckClusterNames"},{"kind":"app_task","name":"8VerifyRelease"},{"kind":"app_task","name":"9CreateK8sCluster"},{"kind":"app_task","name":"10RefreshCookies"},{"kind":"app_task","name":"11MonitorDeployment"},{"kind":"app_task","name":"12GetKubeconfig"}],"name":"05c04739_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"4GetSubnetUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5GetClusterUUID"}},{"from_task_reference":{"kind":"app_task","name":"2GetOSFlavor"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3GetImageUUID"}},{"from_task_reference":{"kind":"app_task","name":"3GetImageUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4GetSubnetUUID"}},{"from_task_reference":{"kind":"app_task","name":"1GetCookies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2GetOSFlavor"}},{"from_task_reference":{"kind":"app_task","name":"9CreateK8sCluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"10RefreshCookies"}},{"from_task_reference":{"kind":"app_task","name":"10RefreshCookies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"11MonitorDeployment"}},{"from_task_reference":{"kind":"app_task","name":"11MonitorDeployment"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"12GetKubeconfig"}},{"from_task_reference":{"kind":"app_task","name":"8VerifyRelease"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"9CreateK8sCluster"}},{"from_task_reference":{"kind":"app_task","name":"7CheckClusterNames"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"8VerifyRelease"}},{"from_task_reference":{"kind":"app_task","name":"5GetClusterUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"7CheckClusterNames"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1GetCookies","attrs":{"exit_status":[],"script":"## Open the Karbon UI to set the cookies\n# Set the headers, payload, and creds\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Creds.username}@@'\npc_pass = '@@{PC_Creds.secret}@@'\npayload = {\n  \"action_on_failure\":\"CONTINUE\",\n  \"execution_order\":\"SEQUENTIAL\",\n  \"api_request_list\":[\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/me\"\n    },\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/info\"\n    }\n  ],\n  \"api_version\":\"3.0\"\n}\n\nurl = \"https:\/\/localhost:9440\/karbon\/prism\/api\/nutanix\/v3\/batch\"\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers,\n              auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n# If the call went through successfully\nif resp.ok:\n  \n  # Set the cookie\n  print \"COOKIES={0}\".format(resp.cookies['NTNX_IGW_SESSION'])\n\n# If the Karbon UI batch call failed\nelse:\n  print \"The Karbon UI batch call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["COOKIES"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2GetOSFlavor","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\"length\": 100}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Make the image\/portal\/list call\nurl = \"http:\/\/localhost:2081\/image\/portal\/list\"\nresp = urlreq(url, verb='GET', cookies=cookies,\n              headers=headers, verify=False)\n\n# Get the image uuid\nif resp.ok:\n  for image in json.loads(resp.content):\n    if image['version'] == '@@{image_name}@@':\n      image_uuid = image['uuid']\nelse:\n  print \"image\/portal\/list call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n  \n# Loop for 10 minutes, do a GET every 30 seconds\nfor x in range(20):\n  \n  # Make an image\/list call, regardless of downloaded\/downloading state\n  url = \"https:\/\/localhost:9440\/karbon\/acs\/image\/list\"\n  resp = urlreq(url, verb='GET', cookies=cookies,\n                headers=headers, verify=False)\n\n  # If the call was successful, loop through the images (there may be more than one)\n  if resp.ok:\n    for image in json.loads(resp.content):\n      print(json.dumps(image, indent=4))\n      # If this is our image, print status\n      if image['version'] == '@@{image_name}@@':\n        print \"\\nImage:  'karbon-\" + image['version'] + \"'\"\n        print \"Status: '\" + image['status'] + \"'\"\n        \n        # If the image is available, download it\n        if image['status'] == 'Available':\n          \n          print \"\\nKarbon image not found. Downloading now.\"\n          payload = {\"uuid\": image_uuid}\n          url = \"http:\/\/localhost:2081\/image\/download\"\n          resp = urlreq(url, verb='POST', cookies=cookies,\n                        params=json.dumps(payload), headers=headers, verify=False)\n          \n          # If the call went through successfully, set the new url, then loop\n          if resp.ok:\n            print \"Image download started.\"\n          else:\n            print \"Image download call failed. Erroring out.\"\n            exit(1)\n        \n        # If the image is downloaded, exit successfully\n        elif image['status'] == 'Downloaded':\n          print \"IMAGE_UUID={0}\".format(image['uuid'])\n          print \"OS_FLAVOR={0}\".format(image['os_flavor'])\n          print \"Image successfully downloaded.  Exiting.\"\n          exit(0)\n      \n  else:\n    print \"Image list call failed.  Erroring out.\"\n    exit(1)\n        \n  print \"Sleeping for 30 seconds\"\n  sleep(30)\n\n# If we made it this far, assume the download failed\nprint \"The Karbon image was not downloaded in 10 minutes. Erroring out.\"\nexit(1)","eval_variables":["OS_FLAVOR"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3GetImageUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the jwt, headers and payload\n\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {'length': 100}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Set the address and make images call\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/images\/list\"\nresp = urlreq(url, verb='POST', cookies=cookies,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the call went through successfully, set the cookie and then find the image by name\nif resp.ok:\n  for entity in json.loads(resp.content)['entities']:\n    if entity['status']['name'] == 'karbon-@@{image_name}@@':\n      print \"IMAGE_UUID={0}\".format(entity['metadata']['uuid'])\n      exit(0)\n\n# If the call failed\nelse:\n  print \"Images call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: '@@{image_name}@@' image was not found.\"\nexit(0)","eval_variables":["IMAGE_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4GetSubnetUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Set the address and make projects call\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/projects\/list\"\nresp = urlreq(url, verb='POST', cookies=cookies,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the call went through successfully, find the project by name\nif resp.ok:\n  for entity in json.loads(resp.content)['entities']:\n    if entity['status']['name'] == '@@{calm_project_name}@@':\n      for subnet in entity['status']['resources']['subnet_reference_list']:\n        if subnet['name'] == '@@{network_name}@@':\n          print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n          exit(0)\n      else:\n        print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n        exit(1)\n\n# If the call failed\nelse:\n  print \"Projects call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: '@@{calm_project_name}@@' project was not found.\"\nexit(0)","eval_variables":["SUBNET_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5GetClusterUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Set the address and make subnets call\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/subnets\/@@{SUBNET_UUID}@@\"\nresp = urlreq(url, verb='GET', cookies=cookies,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the call went through successfully, set the cluster_ref UUID\nif resp.ok:\n  spec = json.loads(resp.content)['spec']\n  print \"CLUSTER_UUID={0}\".format(spec['cluster_reference']['uuid'])\n  exit(0)\n\n# If the call failed\nelse:\n  print \"Projects call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: something went wrong.\"\nexit(0)","eval_variables":["CLUSTER_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7CheckClusterNames","attrs":{"exit_status":[],"script":"## Create the Karbon Kubernetes cluster\n# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\npayload = {}\n\n# Set the address and make images call\nurl = \"http:\/\/localhost:2081\/k8s\/cluster\/list\"\nresp = urlreq(url, verb='POST', cookies=cookies,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the call went through successfully, check the names of the clusters\nif resp.ok:\n\n  create_cluster = True\n  \n  for cluster in json.loads(resp.content):\n    print(cluster)\n    if cluster['cluster_metadata']['name'] == '@@{cluster_name}@@':\n      print(\"CREATE_CLUSTER=false\")\n      print(\"K8S_CLUSTER_UUID={0}\".format(spec['cluster_uuid']))\n      create_cluster = False\n  \n  if create_cluster:\n    print \"CREATE_CLUSTER=true\"\n\n  exit(0)\n\n# If the call failed\nelse:\n  print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CREATE_CLUSTER","K8S_CLUSTER_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8VerifyRelease","attrs":{"script":"# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\npayload = {}\n\n# Set the address and make version call\nurl = \"http:\/\/localhost:2081\/k8srelease\/portal\/list\"\nresp = urlreq(url, verb='GET', cookies=cookies,\n              headers=headers, verify=False)\n\n# If the call went through successfully, check the available versions\nif resp.ok:\n  \n  # Find our matching version and exit success\n  for version in json.loads(resp.content):\n    if version['version'] == \"@@{k8s_version}@@\":\n      print(\"Success: @@{k8s_version}@@ is a valid Kubernetes version.\")\n      exit(0)\n\n  # If we got this far, the version does not match\n  print(\"Error: @@{k8s_version}@@ is NOT a valid Kubernetes version.\")\n  print(\"Supported Kubernetes versions on this release of Karbon are:\")\n  for version in json.loads(resp.content):\n    print(version['version'])\n  exit(1)\n\n# If the call failed\nelse:\n  print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9CreateK8sCluster","attrs":{"exit_status":[],"script":"# Based on previous task, only create the cluster if it does not already exist\nif \"@@{CREATE_CLUSTER}@@\" == \"true\":\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\n  headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n  cookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n  payload = {\n  \"cni_config\": {\n    \"flannel_config\": {\n      \"ip_pool_configs\": [{\n        \"cidr\":\"172.20.0.0\/16\"\n      }]\n    },\n    \"node_cidr_mask_size\": 24,\n    \"pod_ipv4_cidr\": \"172.20.0.0\/16\",\n    \"service_ipv4_cidr\": \"172.19.0.0\/16\"\n  },\n  \"etcd_config\": {\n    \"node_pools\": [\n      {\n        \"ahv_config\": {\n          \"cpu\": 4,\n          \"disk_mib\": 40960,\n          \"memory_mib\": 8192,\n          \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n          \"prism_element_cluster_uuid\": \"@@{CLUSTER_UUID}@@\"\n        },\n        \"name\": \"etcd-node-pool\",\n        \"node_os_version\": \"@@{image_name}@@\",\n        \"num_instances\": 1\n      }\n    ]\n  },\n  \"masters_config\": {\n    \"single_master_config\": {\n      \"external_ipv4_address\": \"\"\n    },\n    \"node_pools\": [\n      {\n        \"ahv_config\": {\n          \"cpu\": 8,\n          \"disk_mib\": 122880,\n          \"memory_mib\": 8192,\n          \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n          \"prism_element_cluster_uuid\": \"@@{CLUSTER_UUID}@@\"\n        },\n        \"name\": \"master-node-pool\",\n        \"node_os_version\": \"@@{image_name}@@\",\n        \"num_instances\": 1\n      }\n    ]\n  },\n  \"metadata\": {\n    \"api_version\": \"v1.0.0\"\n  },\n  \"name\": \"@@{cluster_name}@@\",\n  \"storage_class_config\": {\n    \"default_storage_class\": True,\n    \"name\": \"default-storageclass\",\n    \"reclaim_policy\": \"Delete\",\n    \"volumes_config\": {\n      \"file_system\": \"ext4\",\n      \"flash_mode\": False,\n      \"password\": \"@@{PE_Creds.secret}@@\",\n      \"prism_element_cluster_uuid\": \"@@{CLUSTER_UUID}@@\",\n      \"storage_container\": \"SelfServiceContainer\",\n      \"username\": \"@@{PE_Creds.username}@@\"\n    }\n  },\n  \"version\": \"@@{k8s_version}@@\",\n  \"workers_config\": {\n    \"node_pools\": [\n      {\n        \"ahv_config\": {\n          \"cpu\": 8,\n          \"disk_mib\": 122880,\n          \"memory_mib\": 8192,\n          \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n          \"prism_element_cluster_uuid\": \"@@{CLUSTER_UUID}@@\"\n        },\n        \"name\": \"worker-node-pool\",\n        \"node_os_version\": \"@@{image_name}@@\",\n        \"num_instances\": 2\n      }\n    ]\n  }\n}\n  # Set the address and make images call\n  url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\"\n  resp = urlreq(url, verb='POST', cookies=cookies,\n                params=json.dumps(payload), headers=headers, verify=False)\n\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    print(\"Cluster create was successful\")\n    spec = json.loads(resp.content)\n    print(\"K8S_CLUSTER_UUID={0}\".format(spec['cluster_uuid']))\n    print(\"K8S_TASK_UUID={0}\".format(spec['task_uuid']))\n    exit(0)\n\n  # If the call failed\n  else:\n    print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nelse:\n  print \"Skipping cluster create\"","eval_variables":["K8S_CLUSTER_UUID","K8S_TASK_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"10RefreshCookies","attrs":{"exit_status":[],"script":"## Open the Karbon UI to set the cookies\n# Set the headers, payload, and creds\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Creds.username}@@'\npc_pass = '@@{PC_Creds.secret}@@'\npayload = {\n  \"action_on_failure\":\"CONTINUE\",\n  \"execution_order\":\"SEQUENTIAL\",\n  \"api_request_list\":[\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/me\"\n    },\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/info\"\n    }\n  ],\n  \"api_version\":\"3.0\"\n}\n\nurl = \"https:\/\/localhost:9440\/karbon\/prism\/api\/nutanix\/v3\/batch\"\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers,\n              auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n# If the call went through successfully\nif resp.ok:\n  \n  # Set the cookie\n  print \"COOKIES={0}\".format(resp.cookies['NTNX_IGW_SESSION'])\n\n# If the Karbon UI batch call failed\nelse:\n  print \"The Karbon UI batch call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["COOKIES"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"11MonitorDeployment","attrs":{"script":"# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\npayload = {\n  \"cluster_uuids\":[\n    \"@@{K8S_CLUSTER_UUID}@@\"\n  ]\n}\n\n# Loop for 20 minutes, do a GET every 30 seconds\nfor x in range(40):\n  \n  # Set the address and make cluster\/list call\n  url = \"https:\/\/localhost:7050\/karbon\/acs\/k8s\/cluster\/list\"\n  resp = urlreq(url, verb='POST', cookies=cookies,\n                params=json.dumps(payload), headers=headers, verify=False)\n\n  # If the call went through successfully, check the progress\n  if resp.ok:\n\n    for cluster in json.loads(resp.content):\n      if cluster[\"task_uuid\"] == \"@@{K8S_TASK_UUID}@@\":\n        if cluster[\"task_progress_percent\"] == 100:\n          print(\"Kubernetes cluster deployed successfully.\")\n          exit(0)\n        else:\n          print(\"Kubernetes cluster progress: \" + str(cluster[\"task_progress_percent\"]))\n    \n    print(\"Sleeping for 30 seconds\")\n    sleep(30)\n\n  # If the call failed\n  else:\n    print \"Cluster list call failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n    \n# If we got to this point, the cluster didn't create in 20 minutes, so error out\nelse:\n  print \"Cluster was not created in 20 minutes, errroring out.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"12GetKubeconfig","attrs":{"exit_status":[],"script":"# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Set the address and make kubeconfig call\nurl = \"https:\/\/localhost:7050\/acs\/k8s\/cluster\/@@{K8S_CLUSTER_UUID}@@\/kubeconfig\"\nresp = urlreq(url, verb='GET', cookies=cookies, headers=headers, verify=False)\n\n# If the call went through successfully, print out the kubeconfig\nif resp.ok:\n  print \"KUBECONFIG={0}\".format(json.loads(resp.content)['yml_config'])\n  exit(0)\n\n# If the call failed\nelse:\n  print \"Get kubeconfig failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["KUBECONFIG"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"50d9dd98_runbook","main_task_local_reference":{"kind":"app_task","name":"05c04739_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Kubernetes_Package"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1GetCookies"},{"kind":"app_task","name":"2DeleteCluster"}],"name":"1b7e445c_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1GetCookies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2DeleteCluster"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1GetCookies","attrs":{"exit_status":[],"script":"## Open the Karbon UI to set the cookies\n# Set the headers, payload, and creds\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Creds.username}@@'\npc_pass = '@@{PC_Creds.secret}@@'\npayload = {\n  \"action_on_failure\":\"CONTINUE\",\n  \"execution_order\":\"SEQUENTIAL\",\n  \"api_request_list\":[\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/me\"\n    },\n    {\n      \"operation\":\"GET\",\n      \"path_and_params\":\"\/api\/nutanix\/v3\/users\/info\"\n    }\n  ],\n  \"api_version\":\"3.0\"\n}\n\nurl = \"https:\/\/localhost:9440\/karbon\/prism\/api\/nutanix\/v3\/batch\"\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers,\n              auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n# If the call went through successfully\nif resp.ok:\n  \n  # Set the cookie\n  print \"COOKIES={0}\".format(resp.cookies['NTNX_IGW_SESSION'])\n\n# If the Karbon UI batch call failed\nelse:\n  print \"The Karbon UI batch call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["COOKIES"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Kubernetes"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2DeleteCluster","attrs":{"script":"## Delete the Karbon Kubernetes cluster\n# Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\ncookies = {'NTNX_IGW_SESSION': '@@{COOKIES}@@'}\n\n# Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{K8S_CLUSTER_UUID}@@\"\nresp = urlreq(url, verb='DELETE', cookies=cookies,\n              headers=headers, verify=False)\n\n# If the call went through successfully, find the image by name\nif resp.ok:\n  print(\"Cluster delete was successful\")\n  spec = json.loads(resp.content)\n  exit(0)\n\n# If the call failed\nelse:\n  print \"Cluster delete failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"9500032c_runbook","main_task_local_reference":{"kind":"app_task","name":"1b7e445c_dag"},"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"CentOS_7_Cloud","version":"","options":{"type":"","name":"CentOS_7_Cloud_Image","resources":{"image_type":"DISK_IMAGE","checksum":{"checksum_algorithm":"","type":"","checksum_value":""},"source_uri":"https:\/\/storage.googleapis.com\/testdrive-templates\/library\/images\/CentOS-7-x86_64-1810.qcow2","version":{"product_version":"7","type":"","product_name":"CentOS"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Workstation"}],"name":"Workstation_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Workstation_Package"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1InstallSoftware"}],"name":"181a55ba_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1InstallSoftware","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\nsudo yum -y update\nsudo yum -y install vim jq git wget elinks\n\necho \"alias k=kubectl\" | tee -a ~\/.bash_profile","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"7eb0c8b4_runbook","main_task_local_reference":{"kind":"app_task","name":"181a55ba_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Workstation_Package"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"aaf5b5b8_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b0d07cb4_runbook","main_task_local_reference":{"kind":"app_task","name":"aaf5b5b8_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"75513331_deployment","min_replicas":"1","default_replicas":"","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Kubernetes_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"Karbon_Kubernetes"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"d8787620_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Workstation_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"Workstation_AHV"},"variable_list":[],"description":""}],"environment_reference_list":[],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1KarbonctlLogin"}],"name":"1d1e484e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Workstation"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1KarbonctlLogin","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"34b468e7_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"879daca8_runbook","main_task_local_reference":{"kind":"app_task","name":"1d1e484e_dag"},"variable_list":[]},"name":"Karbonctl Login"}],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"k8s_version","value":"1.17.13-0","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":true,"value":"^[0-9A-Za-z\\s\\-\\_]{0,40}$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"network_name","value":"NTNX-AHV01_IPAM","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"image_name","value":"ntnx-1.0","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MetalLB_Range","value":"172.23.108.240-172.23.108.249","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"CENTOS"},"type":"USER"},"name":"Deploy_Karbon_Kubernetes"},"api_version":"3.0","metadata":{"last_update_time":"1619678834415663","kind":"blueprint","spec_version":20,"creation_time":"1619431727376893","name":"Deploy_Karbon_Kubernetes"}}