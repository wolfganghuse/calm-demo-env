# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_PE_Creds_PASSWORD = read_local_file("BP_CRED_PE_Creds_PASSWORD")
BP_CRED_PC_Creds_PASSWORD = read_local_file("BP_CRED_PC_Creds_PASSWORD")
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")

# Credentials
BP_CRED_PE_Creds = basic_cred(
    "wolfgang@ntnx.test",
    BP_CRED_PE_Creds_PASSWORD,
    name="PE_Creds",
    type="PASSWORD",
)
BP_CRED_PC_Creds = basic_cred(
    "wolfgang@ntnx.test",
    BP_CRED_PC_Creds_PASSWORD,
    name="PC_Creds",
    type="PASSWORD",
)
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
    default=True,
)


CentOS_7_Cloud = vm_disk_package(
    name="CentOS_7_Cloud",
    description="",
    config={
        "name": "CentOS_7_Cloud",
        "image": {
            "name": "CentOS_7_Cloud_Image",
            "type": "DISK_IMAGE",
            "source": "https://storage.googleapis.com/testdrive-templates/library/images/CentOS-7-x86_64-1810.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "CentOS", "version": "7"},
        "checksum": {},
    },
)


class Kubernetes(Service):

    PC_IP = CalmVariable.Simple(
        "172.23.0.5",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    KUBECONFIG = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    K8S_TASK_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    K8S_CLUSTER_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    OS_FLAVOR = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    IMAGE_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SUBNET_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CLUSTER_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    COOKIES = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CREATE_CLUSTER = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class Workstation(Service):
    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="1ConfKubeconfig",
            filename=os.path.join(
                "scripts",
                "Service_Workstation_Action___create___Task__1ConfKubeconfig.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )
        CalmTask.Exec.ssh(
            name="2ConfServiceAccount",
            filename=os.path.join(
                "scripts",
                "Service_Workstation_Action___create___Task__2ConfServiceAccount.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )
        CalmTask.Exec.ssh(
            name="3InstallMetalLB",
            filename=os.path.join(
                "scripts",
                "Service_Workstation_Action___create___Task__3InstallMetalLB.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )
        CalmTask.Exec.ssh(
            name="4InstallHelm",
            filename=os.path.join(
                "scripts", "Service_Workstation_Action___create___Task__4InstallHelm.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )
        CalmTask.Exec.ssh(
            name="5InstallKarbonctl",
            filename=os.path.join(
                "scripts",
                "Service_Workstation_Action___create___Task__5InstallKarbonctl.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )
        Workstation.Karbonctl_Login(name="6Karbonctl_Login")

    @action
    def Karbonctl_Login():

        CalmTask.Exec.ssh(
            name="KarbonctlLogin",
            filename=os.path.join(
                "scripts",
                "Service_Workstation_Action_Karbonctl_Login_Task_KarbonctlLogin.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )


class Karbon_Kubernetes(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "Karbon_Kubernetes_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_PC_Creds),
    )


class workstationcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(CentOS_7_Cloud, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "workstationcalm_time_cloud_init_data.yaml")
    )


class workstationcalm_time(AhvVm):

    name = "workstation-@@{calm_time}@@"
    resources = workstationcalm_timeResources


class Workstation_AHV(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = workstationcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Workstation_AHV_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Kubernetes_Package(Package):

    services = [ref(Kubernetes)]

    @action
    def __install__():

        CalmTask.SetVariable.escript(
            name="1GetCookies",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__1GetCookies.py",
            ),
            target=ref(Kubernetes),
            variables=["COOKIES"],
        )
        CalmTask.SetVariable.escript(
            name="2GetOSFlavor",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__2GetOSFlavor.py",
            ),
            target=ref(Kubernetes),
            variables=["OS_FLAVOR"],
        )
        CalmTask.SetVariable.escript(
            name="3GetImageUUID",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__3GetImageUUID.py",
            ),
            target=ref(Kubernetes),
            variables=["IMAGE_UUID"],
        )
        CalmTask.SetVariable.escript(
            name="4GetSubnetUUID",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__4GetSubnetUUID.py",
            ),
            target=ref(Kubernetes),
            variables=["SUBNET_UUID"],
        )
        CalmTask.SetVariable.escript(
            name="5GetClusterUUID",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__5GetClusterUUID.py",
            ),
            target=ref(Kubernetes),
            variables=["CLUSTER_UUID"],
        )
        CalmTask.SetVariable.escript(
            name="7CheckClusterNames",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__7CheckClusterNames.py",
            ),
            target=ref(Kubernetes),
            variables=["CREATE_CLUSTER", "K8S_CLUSTER_UUID"],
        )
        CalmTask.Exec.escript(
            name="8VerifyRelease",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__8VerifyRelease.py",
            ),
            target=ref(Kubernetes),
        )
        CalmTask.SetVariable.escript(
            name="9CreateK8sCluster",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__9CreateK8sCluster.py",
            ),
            target=ref(Kubernetes),
            variables=["K8S_CLUSTER_UUID", "K8S_TASK_UUID"],
        )
        CalmTask.SetVariable.escript(
            name="10RefreshCookies",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__10RefreshCookies.py",
            ),
            target=ref(Kubernetes),
            variables=["COOKIES"],
        )
        CalmTask.Exec.escript(
            name="11MonitorDeployment",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__11MonitorDeployment.py",
            ),
            target=ref(Kubernetes),
        )
        CalmTask.SetVariable.escript(
            name="12GetKubeconfig",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___install___Task__12GetKubeconfig.py",
            ),
            target=ref(Kubernetes),
            variables=["KUBECONFIG"],
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript(
            name="1GetCookies",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___uninstall___Task__1GetCookies.py",
            ),
            target=ref(Kubernetes),
            variables=["COOKIES"],
        )
        CalmTask.Exec.escript(
            name="2DeleteCluster",
            filename=os.path.join(
                "scripts",
                "Package_Kubernetes_Package_Action___uninstall___Task__2DeleteCluster.py",
            ),
            target=ref(Kubernetes),
        )


class Workstation_Package(Package):

    services = [ref(Workstation)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="1InstallSoftware",
            filename=os.path.join(
                "scripts",
                "Package_Workstation_Package_Action___install___Task__1InstallSoftware.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Workstation),
        )


class _75513331_deployment(Deployment):

    name = "75513331_deployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(Kubernetes_Package)]
    substrate = ref(Karbon_Kubernetes)


class d8787620_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Workstation_Package)]
    substrate = ref(Workstation_AHV)


class Default(Profile):

    deployments = [_75513331_deployment, d8787620_deployment]

    k8s_version = CalmVariable.Simple(
        "1.17.13-0",
        label="",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    cluster_name = CalmVariable.Simple(
        "",
        label="",
        regex="^[0-9A-Za-z\s\-\_]{0,40}$",
        validate_regex=True,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    network_name = CalmVariable.Simple(
        "NTNX-DEMO01_IPAM",
        label="",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    image_name = CalmVariable.Simple(
        "ntnx-1.0",
        label="",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    MetalLB_Range = CalmVariable.Simple(
        "172.23.108.240-172.23.108.249",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def KarbonctlLogin(name="Karbonctl Login"):

        Workstation.Karbonctl_Login(name="1KarbonctlLogin")


class Deploy_Karbon_Kubernetes(Blueprint):

    services = [Kubernetes, Workstation]
    packages = [Kubernetes_Package, CentOS_7_Cloud, Workstation_Package]
    substrates = [Karbon_Kubernetes, Workstation_AHV]
    profiles = [Default]
    credentials = [BP_CRED_PE_Creds, BP_CRED_PC_Creds, BP_CRED_CENTOS]
