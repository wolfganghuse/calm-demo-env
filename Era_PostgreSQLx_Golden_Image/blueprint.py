# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_cred_era_password_PASSWORD = read_local_file(
    "BP_CRED_cred_era_password_PASSWORD"
)
BP_CRED_cred_centos_key_KEY = read_local_file("BP_CRED_cred_centos_key_KEY")
BP_CRED_cred_era_admin_password_PASSWORD = read_local_file(
    "BP_CRED_cred_era_admin_password_PASSWORD"
)

# Credentials
BP_CRED_cred_era_password = basic_cred(
    "era",
    BP_CRED_cred_era_password_PASSWORD,
    name="cred_era_password",
    type="PASSWORD",
    default=True,
)
BP_CRED_cred_centos_key = basic_cred(
    "centos",
    BP_CRED_cred_centos_key_KEY,
    name="cred_centos_key",
    type="KEY",
)
BP_CRED_cred_era_admin_password = basic_cred(
    "admin",
    BP_CRED_cred_era_admin_password_PASSWORD,
    name="cred_era_admin_password",
    type="PASSWORD",
)


class Service1(Service):

    pass


class pg12calm_timeResources(AhvVmResources):

    memory = 16
    vCPUs = 4
    cores_per_vCPU = 2
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("CentOS7", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "pg12calm_time_cloud_init_data.yaml")
    )


class pg12calm_time(AhvVm):

    name = "pg12-@@{calm_time}@@"
    resources = pg12calm_timeResources


class pg12(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = pg12calm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "pg12_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_cred_centos_key),
    )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="1_update_yum",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task__1_update_yum.sh"
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="2_update_pip_epel",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__2_update_pip_epel.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="3_dependency_packages",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__3_dependency_packages.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="4_haproxy_install",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__4_haproxy_install.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="5_pre_reqs_patroni_pg",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__5_pre_reqs_patroni_pg.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="edit_postgre_bashrc",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_edit_postgre_bashrc.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="6_patroni_install",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__6_patroni_install.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="7_etcd_installation",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__7_etcd_installation.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="8_keepalive_install",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task__8_keepalive_install.sh",
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="show_versions",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_show_versions.sh"
            ),
            cred=ref(BP_CRED_cred_centos_key),
            target=ref(Service1),
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript(
            name="delete_registered_databasevm",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_delete_registered_databasevm.py",
            ),
            target=ref(Service1),
            variables=["DeleteOperationId"],
        )
        CalmTask.Exec.escript(
            name="MonitorDeleteDatabaseVM",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_MonitorDeleteDatabaseVM.py",
            ),
            target=ref(Service1),
        )


class _9616d505_deployment(Deployment):

    name = "9616d505_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(pg12)


class Default(Profile):

    deployments = [_9616d505_deployment]

    era_ip = CalmVariable.Simple(
        "10.200.100.40",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    postgre_version = CalmVariable.WithOptions(
        ["9.6", "10", "11", "12"],
        label="PostGreSQL Version",
        default="12",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def RegisterGoldenImage(name="Register Golden Image"):

        CalmTask.SetVariable.escript(
            name="GetEraDetails",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_RegisterGoldenImage_Task_GetEraDetails.py",
            ),
            target=ref(Service1),
            variables=["CLUSTER_ID"],
        )
        CalmTask.SetVariable.escript(
            name="Register Golden Image",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_RegisterGoldenImage_Task_RegisterGoldenImage.py",
            ),
            target=ref(Service1),
            variables=["REGISTER_OPERATION_ID"],
        )
        CalmTask.SetVariable.escript(
            name="MonitorRegisterDBVM",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_RegisterGoldenImage_Task_MonitorRegisterDBVM.py",
            ),
            target=ref(Service1),
            variables=["SOURCE_DBSERVER_ID"],
        )
        CalmTask.SetVariable.escript(
            name="CreateSoftwareProfile",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_RegisterGoldenImage_Task_CreateSoftwareProfile.py",
            ),
            target=ref(Service1),
            variables=["CREATEPROFILE_OPERATION_ID"],
        )
        CalmTask.Exec.escript(
            name="MonitorCreateProfile",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_RegisterGoldenImage_Task_MonitorCreateProfile.py",
            ),
            target=ref(Service1),
        )


class EraPostgreSQLxGoldenImage(Blueprint):
    """Based on https://confluence.eng.nutanix.com:8443/pages/viewpage.action?pageId=77381421
    Custom Action for registering Database VM and create Software Profile
    Needs Centos7 Image like https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-2009.qcow2"""

    services = [Service1]
    packages = [Package1]
    substrates = [pg12]
    profiles = [Default]
    credentials = [
        BP_CRED_cred_era_password,
        BP_CRED_cred_centos_key,
        BP_CRED_cred_era_admin_password,
    ]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
