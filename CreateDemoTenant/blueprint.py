# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_cred_Vault_PASSWORD = read_local_file("BP_CRED_cred_Vault_PASSWORD")
BP_CRED_cred_PCDemo_PASSWORD = read_local_file("BP_CRED_cred_PCDemo_PASSWORD")
BP_CRED_cred_FortiGate_PASSWORD = read_local_file("BP_CRED_cred_FortiGate_PASSWORD")
BP_CRED_cred_phpIPAM_PASSWORD = read_local_file("BP_CRED_cred_phpIPAM_PASSWORD")
BP_CRED_cred_PrismCentral_PASSWORD = read_local_file(
    "BP_CRED_cred_PrismCentral_PASSWORD"
)

# Credentials
BP_CRED_cred_Vault = basic_cred(
    "demo-mgr-token",
    BP_CRED_cred_Vault_PASSWORD,
    name="cred_Vault",
    type="PASSWORD",
    default=True,
)
BP_CRED_cred_PCDemo = basic_cred(
    "admin",
    BP_CRED_cred_PCDemo_PASSWORD,
    name="cred_PCDemo",
    type="PASSWORD",
    default=True,
)
BP_CRED_cred_FortiGate = basic_cred(
    "admin",
    BP_CRED_cred_FortiGate_PASSWORD,
    name="cred_FortiGate",
    type="PASSWORD",
)
BP_CRED_cred_phpIPAM = basic_cred(
    "demoenv",
    BP_CRED_cred_phpIPAM_PASSWORD,
    name="cred_phpIPAM",
    type="PASSWORD",
)
BP_CRED_cred_PrismCentral = basic_cred(
    "wolfgang@ntnx.test",
    BP_CRED_cred_PrismCentral_PASSWORD,
    name="cred_PrismCentral",
    type="PASSWORD",
)


class Vault (Service):
    
    vault_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class phpIPAM(Service):

    vlan_id = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    subnet_id = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    gw_id = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    gw_ip = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    subnet = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    vlan_number = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class Fortigate(Service):

    fortigate_csrf_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    fortigate_cookie = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    interface_name = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class PrismCentralDemo(Service):

    task_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    subnet_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    project_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    environment_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    nutanix_calm_user_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class existing_Vault(Substrate):


    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "existing_Vault_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )


class existing_phpIPAM(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "existing_phpIPAM_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )


class existing_Fortigate(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "existing_Fortigate_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )


class existing_PrismCentralDemo(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "existing_PrismCentralDemo_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )

class pkg_Vault(Package):
    
    services = [ref(Vault)]

    @action
    def __install__():

        CalmTask.Exec.escript(
            name="Create Policy",
            filename=os.path.join(
                "scripts", "Package_pkg_Vault_Action___install___Task_CreatePolicy.py"
            ),
            target=ref(Vault)
        )

        CalmTask.SetVariable.escript(
            name="Get Token",
            filename=os.path.join(
                "scripts", "Package_pkg_Vault_Action___install___Task_GetToken.py"
            ),
            target=ref(Vault),
            variables=["vault_token"]
        )

class pkg_phpIPAM(Package):

    services = [ref(phpIPAM)]

    @action
    def __install__():

        CalmTask.SetVariable.escript(
            name="Get free VLAN",
            filename=os.path.join(
                "scripts", "Package_pkg_phpIPAM_Action___install___Task_GetfreeVLAN.py"
            ),
            target=ref(phpIPAM),
            variables=["vlan_id", "vlan_number"],
        )
        CalmTask.SetVariable.escript(
            name="Get free Network",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___install___Task_GetfreeNetwork.py",
            ),
            target=ref(phpIPAM),
            variables=["subnet_id"],
        )
        CalmTask.Exec.escript(
            name="Assign VLAN to Tenant",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___install___Task_AssignVLANtoTenant.py",
            ),
            target=ref(phpIPAM),
        )
        CalmTask.Exec.escript(
            name="Assign Subnet to Tenant",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___install___Task_AssignSubnettoTenant.py",
            ),
            target=ref(phpIPAM),
        )
        CalmTask.SetVariable.escript(
            name="Get Gateway IP",
            filename=os.path.join(
                "scripts", "Package_pkg_phpIPAM_Action___install___Task_GetGatewayIP.py"
            ),
            target=ref(phpIPAM),
            variables=["gw_id", "gw_ip"],
        )
        CalmTask.SetVariable.escript(
            name="Get Network Details",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___install___Task_GetNetworkDetails.py",
            ),
            target=ref(phpIPAM),
            variables=["subnet"],
        )

    @action
    def __uninstall__():

        CalmTask.Exec.escript(
            name="Release Subnet",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___uninstall___Task_ReleaseSubnet.py",
            ),
            target=ref(phpIPAM),
        )
        CalmTask.Exec.escript(
            name="Release VLAN",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___uninstall___Task_ReleaseVLAN.py",
            ),
            target=ref(phpIPAM),
        )
        CalmTask.Exec.escript(
            name="Release GW IP",
            filename=os.path.join(
                "scripts",
                "Package_pkg_phpIPAM_Action___uninstall___Task_ReleaseGWIP.py",
            ),
            target=ref(phpIPAM),
        )


class pkg_Fortigate(Package):

    services = [ref(Fortigate)]

    @action
    def __install__():

        CalmTask.SetVariable.escript(
            name="Login Fortigate",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___install___Task_LoginFortigate.py",
            ),
            target=ref(Fortigate),
            variables=["fortigate_csrf_token", "fortigate_cookie"],
        )
        CalmTask.SetVariable.escript(
            name="Create VLAN Interface",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___install___Task_CreateVLANInterface.py",
            ),
            target=ref(Fortigate),
            variables=["interface_name"],
        )
        CalmTask.Exec.escript(
            name="Create Address Object",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___install___Task_CreateAddressObject.py",
            ),
            target=ref(Fortigate),
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript(
            name="Login Fortigate",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___uninstall___Task_LoginFortigate.py",
            ),
            target=ref(Fortigate),
            variables=["fortigate_csrf_token", "fortigate_cookie"],
        )
        CalmTask.Exec.escript(
            name="Delete Address Object",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___uninstall___Task_DeleteAddressObject.py",
            ),
            target=ref(Fortigate),
        )
        CalmTask.Exec.escript(
            name="Delete VLAN Interface",
            filename=os.path.join(
                "scripts",
                "Package_pkg_Fortigate_Action___uninstall___Task_DeleteVLANInterface.py",
            ),
            target=ref(Fortigate),
        )


class pkg_PrismCentralDemo(Package):

    services = [ref(PrismCentralDemo)]

    @action
    def __install__():

        CalmTask.SetVariable.escript(
            name="Create Tenant Subnet",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_CreateTenantSubnet.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["task_uuid"],
        )
        CalmTask.Exec.escript(
            name="MonitorVLAN",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_MonitorVLAN.py",
            ),
            target=ref(PrismCentralDemo),
        )
        CalmTask.SetVariable.escript(
            name="Get Subnet UUID",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_GetSubnetUUID.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["subnet_uuid"],
        )
        CalmTask.SetVariable.escript(
            name="Get User Uuid",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_GetUserUuid.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["nutanix_calm_user_uuid"],
        )
        CalmTask.SetVariable.escript(
            name="Create Project",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_CreateProject.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["task_uuid"],
        )
        CalmTask.Exec.escript(
            name="Monitor Project",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_MonitorProject.py",
            ),
            target=ref(PrismCentralDemo),
        )
        CalmTask.SetVariable.escript(
            name="Get Project UUID",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___install___Task_GetProjectUUID.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["project_uuid"],
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript(
            name="Delete Subnet",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___uninstall___Task_DeleteSubnet.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["task_uuid"],
        )
        CalmTask.Exec.escript(
            name="Monitor Delete Subnet",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___uninstall___Task_MonitorDeleteSubnet.py",
            ),
            target=ref(PrismCentralDemo),
        )
        CalmTask.SetVariable.escript(
            name="Delete Project",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___uninstall___Task_DeleteProject.py",
            ),
            target=ref(PrismCentralDemo),
            variables=["task_uuid"],
        )
        CalmTask.Exec.escript(
            name="Monitor Delete Project",
            filename=os.path.join(
                "scripts",
                "Package_pkg_PrismCentralDemo_Action___uninstall___Task_MonitorDeleteProject.py",
            ),
            target=ref(PrismCentralDemo),
        )


class _0720591e_deployment(Deployment):

    name = "0720591e_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(pkg_phpIPAM)]
    substrate = ref(existing_phpIPAM)


class b6867c95_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(pkg_Fortigate)]
    substrate = ref(existing_Fortigate)


class a6542720_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(pkg_PrismCentralDemo)]
    substrate = ref(existing_PrismCentralDemo)

class Vault_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(pkg_Vault)]
    substrate = ref(existing_Vault)


class Default(Profile):

    deployments = [_0720591e_deployment, b6867c95_deployment, a6542720_deployment, Vault_deployment]

    tenant_prefix = CalmVariable.Simple(
        "demo3",
        label="Tenant ID",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    phpIPAM_section = CalmVariable.Simple(
        "DACHLab",
        label="Demo Network Section",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    phpIPAM_network_space = CalmVariable.Simple(
        "Demo-Networks",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    phpIPAM_gw_space = CalmVariable.Simple(
        "Demo-Network",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )


class CreateDemoTenant(Blueprint):

    services = [phpIPAM, Fortigate, PrismCentralDemo, Vault]
    packages = [pkg_phpIPAM, pkg_Fortigate, pkg_PrismCentralDemo, pkg_Vault]
    substrates = [existing_phpIPAM, existing_Fortigate, existing_PrismCentralDemo, existing_Vault]
    profiles = [Default]
    credentials = [
        BP_CRED_cred_PCDemo,
        BP_CRED_cred_FortiGate,
        BP_CRED_cred_phpIPAM,
        BP_CRED_cred_PrismCentral,
        BP_CRED_cred_Vault
    ]
