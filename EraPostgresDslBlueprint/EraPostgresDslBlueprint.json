{"status":{},"contains_secrets":true,"product_version":"3.2.0","spec":{"description":"created by Azure Pipeline Build: 80","resources":{"client_attrs":{"None":{"Profile":{"Default":{"Action":{},"dsl_name":"Default"}},"Package":{"PostgresPackage":{"Action":{},"dsl_name":"PostgresPackage"}},"Substrate":{"Era_PostgreSQL_DB":{"Action":{},"dsl_name":"Era_PostgreSQL_DB"}},"Service":{"Postgres":{"Action":{},"dsl_name":"Postgres"}},"Deployment":{"PostgresDeployment":{"Action":{},"dsl_name":"PostgresDeployment"}}}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___create___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___create___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___create___dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for starting an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___start___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___start___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___start___dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___stop___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___stop___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___stop___dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___delete___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___delete___dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for restarting an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___restart___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___restart___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___restart___dag"},"variable_list":[]},"name":"action_restart"},{"description":"System action for deleting an application. Does not delete created VMs","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Postgres___soft_delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Postgres___soft_delete___runbook","main_task_local_reference":{"kind":"app_task","name":"Postgres___soft_delete___dag"},"variable_list":[]},"name":"action_soft_delete"}],"depends_on_list":[],"name":"Postgres","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"Postgres VM provisioned by Era","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1GetClusterID"},{"kind":"app_task","name":"2GetProfileIDs"},{"kind":"app_task","name":"3GetSLAID"},{"kind":"app_task","name":"4ProvisionDB"},{"kind":"app_task","name":"5MonitorOperation"},{"kind":"app_task","name":"6GetDatabaseInfo"}],"name":"Era_PostgreSQL_DB___pre_create___dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1GetClusterID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2GetProfileIDs"}},{"from_task_reference":{"kind":"app_task","name":"2GetProfileIDs"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3GetSLAID"}},{"from_task_reference":{"kind":"app_task","name":"3GetSLAID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4ProvisionDB"}},{"from_task_reference":{"kind":"app_task","name":"4ProvisionDB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5MonitorOperation"}},{"from_task_reference":{"kind":"app_task","name":"5MonitorOperation"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6GetDatabaseInfo"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1GetClusterID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Get Cluster ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/clusters\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"CLUSTER_ID={0}\".format(json.loads(resp.content)[0][\"id\"]))\nelse:\n    print(\n        \"Get Cluster ID request failed\", json.dumps(json.loads(resp.content), indent=4)\n    )\n    exit(1)\n","eval_variables":["CLUSTER_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2GetProfileIDs","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Get Software Profile ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/profiles?type=Software&name=@@{software_profile}@@\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"SOFTWARE_PROF_ID={0}\".format(json.loads(resp.content)[\"id\"]))\nelse:\n    print(\n        \"Get Software Profile ID request failed\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n\n# Get Compute Profile ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/profiles?type=Compute&name=@@{compute_profile}@@\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"COMPUTE_PROF_ID={0}\".format(json.loads(resp.content)[\"id\"]))\nelse:\n    print(\n        \"Get Compute Profile ID request failed\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n\n# Get Network Profile ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/profiles?type=Network&name=@@{network_profile}@@\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"NETWORK_PROF_ID={0}\".format(json.loads(resp.content)[\"id\"]))\nelse:\n    print(\n        \"Get Network Profile ID request failed\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n\n# Get DB Parameter ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/profiles?type=Database_Parameter&name=@@{database_parameter}@@\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"DB_PARAM_ID={0}\".format(json.loads(resp.content)[\"id\"]))\nelse:\n    print(\n        \"Get DB Parameter ID request failed\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n","eval_variables":["SOFTWARE_PROF_ID","COMPUTE_PROF_ID","NETWORK_PROF_ID","DB_PARAM_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3GetSLAID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Get the list of SLAs\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/slas\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\n\n# Find the desired SLA, and set the corresponding ID to the variable\nif resp.ok:\n    for sla in json.loads(resp.content):\n        if sla[\"name\"] == \"@@{sla_name}@@\":\n            print(\"SLA_ID={0}\".format(sla[\"id\"]))\nelse:\n    print(\"Get SLA request failed\", json.dumps(json.loads(resp.content), indent=4))\n    exit(1)\n","eval_variables":["SLA_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4ProvisionDB","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Set the URL and payload\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/databases\/provision\"\npayload = {\n    \"databaseName\": \"@@{db_name}@@\",\n    \"databaseType\": \"postgres_database\",\n    \"databaseDescription\": \"Postgres database provisioned by Calm Application @@{calm_application_name}@@\",\n    \"clusterId\": \"@@{CLUSTER_ID}@@\",\n    \"softwareProfileId\": \"@@{SOFTWARE_PROF_ID}@@\",\n    \"computeProfileId\": \"@@{COMPUTE_PROF_ID}@@\",\n    \"networkProfileId\": \"@@{NETWORK_PROF_ID}@@\",\n    \"dbParameterProfileId\": \"@@{DB_PARAM_ID}@@\",\n    \"provisionInfo\": [\n        {\"name\": \"application_type\", \"value\": \"postgres_database\"},\n        {\"name\": \"listener_port\", \"value\": \"5432\"},\n        {\"name\": \"database_size\", \"value\": \"200\"},\n        {\"name\": \"working_dir\", \"value\": \"\/tmp\"},\n        {\"name\": \"auto_tune_staging_drive\", \"value\": True},\n        {\"name\": \"db_password\", \"value\": \"@@{db_password}@@\"},\n        {\"name\": \"dbserver_name\", \"value\": \"PostgreSQL-@@{calm_time}@@\"},\n        {\n            \"name\": \"dbserver_description\",\n            \"value\": \"Postgres database server provisioned by Calm Application @@{calm_application_name}@@\",\n        },\n        {\"name\": \"ssh_public_key\", \"value\": \"@@{db_public_key}@@\"},\n    ],\n    \"timeMachineInfo\": {\n        \"name\": \"PostgreSQL-@@{calm_time}@@_TM\",\n        \"description\": \"PostgreSQL-@@{calm_time}@@ time machine\",\n        \"slaId\": \"@@{SLA_ID}@@\",\n        \"schedule\": {\n            \"continuousSchedule\": {\n                \"enabled\": True,\n                \"logBackupInterval\": 30,\n                \"snapshotsPerDay\": 30,\n            },\n            \"snapshotTimeOfDay\": {\"hours\": 1, \"minutes\": 0, \"seconds\": 0},\n            \"weeklySchedule\": {\"enabled\": True, \"dayOfWeek\": \"SUNDAY\"},\n            \"monthlySchedule\": {\"enabled\": True, \"dayOfMonth\": 1},\n            \"quartelySchedule\": {\n                \"enabled\": True,\n                \"startMonth\": \"JANUARY\",\n                \"dayOfMonth\": 1,\n            },\n            \"yearlySchedule\": {\"enabled\": False, \"month\": \"DECEMBER\", \"dayOfMonth\": 1},\n        },\n    },\n}\n\n# Make the call and set the response operation ID to the variable\nresp = urlreq(\n    url,\n    verb=\"POST\",\n    auth=\"BASIC\",\n    user=era_user,\n    passwd=era_pass,\n    params=json.dumps(payload),\n    headers=headers,\n)\nif resp.ok:\n    print(\"CREATE_OPERATION_ID={0}\".format(json.loads(resp.content)[\"operationId\"]))\nelse:\n    print(\n        \"Post Database create request failed\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n","eval_variables":["CREATE_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5MonitorOperation","attrs":{"exit_status":[],"script":"# Set creds, headers, and URL\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{CREATE_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n\n    print(\"Sleeping for 60 seconds.\")\n    sleep(60)\n    resp = urlreq(\n        url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n    )\n    print(\n        \"Percentage Complete: {0}\".format(\n            json.loads(resp.content)[\"percentageComplete\"]\n        )\n    )\n\n    # If complete, break out of loop\n    if json.loads(resp.content)[\"percentageComplete\"] == \"100\":\n        break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)[\"percentageComplete\"] != \"100\":\n    print(\"Get Operation ID timed out\", json.dumps(json.loads(resp.content), indent=4))\n    exit(1)\n\n# Get the newly provision DB Entity Name and set it to a variable\nprint(\"DB_ENTITY_NAME={0}\".format(json.loads(resp.content)[\"entityName\"]))\n","eval_variables":["DB_ENTITY_NAME"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6GetDatabaseInfo","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Get DB Server IP and ID\nurl = \"https:\/\/@@{era_ip}@@\/era\/v0.9\/databases\/@@{DB_ENTITY_NAME}@@?value-type=name&detailed=true&load-dbserver-cluster=true\"\nresp = urlreq(\n    url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\n\nif resp.ok:\n    print(\"DB_SERVER_IP={0}\".format(json.loads(resp.content)[\"databaseNodes\"][0][\"dbserver\"][\"ipAddresses\"][0]))\n    print(\"DB_ID={0}\".format(json.loads(resp.content)[\"id\"]))\n    print(\"DB_SERVER_ID={0}\".format(json.loads(resp.content)[\"databaseNodes\"][0][\"dbserver\"][\"id\"]))\nelse:\n    print(\"Get DB info request failed\", json.dumps(json.loads(resp.content), indent=4))\n    exit(1)\n","eval_variables":["DB_SERVER_IP","DB_ID","DB_SERVER_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"Era_PostgreSQL_DB___pre_create___runbook","main_task_local_reference":{"kind":"app_task","name":"Era_PostgreSQL_DB___pre_create___dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1CleanupDB"},{"kind":"app_task","name":"2MonitorCleanupOp"},{"kind":"app_task","name":"3DeregisterDBServer"},{"kind":"app_task","name":"4MonitorDeregOp"},{"kind":"app_task","name":"5PostProzess"},{"kind":"app_task","name":"6PostProzess"}],"name":"Era_PostgreSQL_DB___post_delete___dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1CleanupDB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2MonitorCleanupOp"}},{"from_task_reference":{"kind":"app_task","name":"2MonitorCleanupOp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3DeregisterDBServer"}},{"from_task_reference":{"kind":"app_task","name":"3DeregisterDBServer"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4MonitorDeregOp"}},{"from_task_reference":{"kind":"app_task","name":"4MonitorDeregOp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5PostProzess"}},{"from_task_reference":{"kind":"app_task","name":"5PostProzess"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6PostProzess"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1CleanupDB","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\n\n# Cleanup the DB and get Operation ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/databases\/@@{DB_ID}@@?storage-cleanup=true&tm-cleanup=true\"\nresp = urlreq(\n    url, verb=\"DELETE\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n)\nif resp.ok:\n    print(\"CLEANUP_OPERATION_ID={0}\".format(json.loads(resp.content)[\"operationId\"]))\nelse:\n    print(\"Cleanup DB Operation failed\", json.dumps(json.loads(resp.content), indent=4))\n    exit(1)\n","eval_variables":["CLEANUP_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2MonitorCleanupOp","attrs":{"script":"# Set creds, headers, and URL\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{CLEANUP_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n\n    print(\"Sleeping for 30 seconds.\")\n    sleep(30)\n    resp = urlreq(\n        url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n    )\n    print(\n        \"Percentage Complete: {0}\".format(\n            json.loads(resp.content)[\"percentageComplete\"]\n        )\n    )\n\n    # If complete, break out of loop\n    if json.loads(resp.content)[\"percentageComplete\"] == \"100\":\n        break\n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)[\"percentageComplete\"] != \"100\":\n    print(\"Cleanup Operation timed out\", json.dumps(json.loads(resp.content), indent=4))\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3DeregisterDBServer","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Cleanup the DB and get Operation ID\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/dbservers\/@@{DB_SERVER_ID}@@?remove=false&soft-remove=false&delete=true&delete-vm-snapshots=true&delete-vgs=true\"\nresp = urlreq(url, verb='DELETE', auth='BASIC',\n              user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n    print \"DEREGISTER_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n    print \"Deregister DB Server Operation failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n","eval_variables":["DEREGISTER_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4MonitorDeregOp","attrs":{"script":"# Set creds, headers, and URL\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{DEREGISTER_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n\n    print(\"Sleeping for 30 seconds.\")\n    sleep(30)\n    resp = urlreq(\n        url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n    )\n    print(\n        \"Percentage Complete: {0}\".format(\n            json.loads(resp.content)[\"percentageComplete\"]\n        )\n    )\n\n    # If complete, break out of loop\n    if json.loads(resp.content)[\"percentageComplete\"] == \"100\":\n        break\n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)[\"percentageComplete\"] != \"100\":\n    print(\n        \"Deregistration Operation timed out\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5PostProzess","attrs":{"script":"# Set creds, headers, and URL\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{DEREGISTER_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n\n    print(\"Sleeping for 30 seconds.\")\n    sleep(30)\n    resp = urlreq(\n        url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n    )\n    print(\n        \"Percentage Complete: {0}\".format(\n            json.loads(resp.content)[\"percentageComplete\"]\n        )\n    )\n\n    # If complete, break out of loop\n    if json.loads(resp.content)[\"percentageComplete\"] == \"100\":\n        break\n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)[\"percentageComplete\"] != \"100\":\n    print(\n        \"Deregistration Operation timed out\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6PostProzess","attrs":{"script":"# Set creds, headers, and URL\nera_user = \"@@{era_creds.username}@@\"\nera_pass = \"@@{era_creds.secret}@@\"\nheaders = {\"Content-Type\": \"application\/json\", \"Accept\": \"application\/json\"}\nurl = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{DEREGISTER_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n\n    print(\"Sleeping for 30 seconds.\")\n    sleep(30)\n    resp = urlreq(\n        url, verb=\"GET\", auth=\"BASIC\", user=era_user, passwd=era_pass, headers=headers\n    )\n    print(\n        \"Percentage Complete: {0}\".format(\n            json.loads(resp.content)[\"percentageComplete\"]\n        )\n    )\n\n    # If complete, break out of loop\n    if json.loads(resp.content)[\"percentageComplete\"] == \"100\":\n        break\n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)[\"percentageComplete\"] != \"100\":\n    print(\n        \"Deregistration Operation timed out\",\n        json.dumps(json.loads(resp.content), indent=4),\n    )\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"Era_PostgreSQL_DB___post_delete___runbook","main_task_local_reference":{"kind":"app_task","name":"Era_PostgreSQL_DB___post_delete___dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"EXISTING_VM","name":"Era_PostgreSQL_DB","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{ip_address}@@","delay_secs":"0","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"era_creds"}},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{DB_SERVER_IP}@@"},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"95x9lccQq7oZqZ\/JYT4dhM5k8VIOZNZy7srzIZ5ThA1AA+ZWXzlPM10nEg==:utf-8"},"name":"era_creds"}],"package_definition_list":[{"description":"","action_list":[],"type":"CUSTOM","service_local_reference_list":[{"kind":"app_service","name":"Postgres"}],"name":"PostgresPackage","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DAG_Task_for_Package_PostgresPackage_action_install","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Runbook_for_Package_PostgresPackage_action_install","main_task_local_reference":{"kind":"app_task","name":"DAG_Task_for_Package_PostgresPackage_action_install"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Postgres"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DAG_Task_for_Package_PostgresPackage_action_uninstall","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Runbook_for_Package_PostgresPackage_action_uninstall","main_task_local_reference":{"kind":"app_task","name":"DAG_Task_for_Package_PostgresPackage_action_uninstall"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"PostgresDeployment","min_replicas":"1","default_replicas":"","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"PostgresPackage"}],"substrate_local_reference":{"kind":"app_substrate","name":"Era_PostgreSQL_DB"},"options":{"type":""},"variable_list":[],"description":""}],"environment_reference_list":[],"description":"","action_list":[],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"compute_profile","value":"LOW_OOB_COMPUTE","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["DEFAULT_OOB_COMPUTE","LOW_OOB_COMPUTE","HIGH_OOB_COMPUTE"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"database_parameter","value":"DEFAULT_POSTGRES_PARAMS","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"db_name","value":"psql_@@{calm_time(\"%Y%m%d%H%M\")}@@","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"db_password","value":"nx21Tech100!","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":true},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"db_public_key","value":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUm18acWv344TgOXBuOnozuSXytDuqKFVE0+x7CK\/dZ6Y331lBF+f8AE\/Ng3tzxvCDUeth3pa7XO\/Y95zc+hTLGROBmWdgidfykBi2FeQ6hZOcsUDslPUL3Ig8UpPzbOva276YP3266+1BGjLi14neBSJvpSV2DvXQovMb57mhAWs9BlVj3UIviHBMQYXc9RUiyoTBYphqQi5THsQafEFEA+3EJ\/NLhqF4CTRZoxMk+VDZbQCCYk0SNEDvDnhEUCIQW1KDg8HDaHrCcRE8DKwi1dgDjASwcUeDuaFto0WrUaj8FdOvaIwjLKYC9DUgsPel+FOLNkg0cPi0vuXb1CGZ era@domain.com","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"era_ip","value":"10.200.100.176","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"network_profile","value":"PostGresNW","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"sla_name","value":"DEFAULT_OOB_GOLD_SLA","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"software_profile","value":"POSTGRES_10.4_OOB","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"era_creds"},"type":"USER"},"name":"EraPostgresDslBlueprint"},"api_version":"3.0","metadata":{"last_update_time":"1618485072246427","kind":"blueprint","spec_version":1,"creation_time":"1618485071191021","name":"EraPostgresDslBlueprint"}}