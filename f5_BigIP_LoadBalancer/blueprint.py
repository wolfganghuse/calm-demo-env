# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_admin_PASSWORD = read_local_file("BP_CRED_admin_PASSWORD")
BP_CRED_root_PASSWORD = read_local_file("BP_CRED_root_PASSWORD")

# Credentials
BP_CRED_admin = basic_cred(
    "admin",
    BP_CRED_admin_PASSWORD,
    name="admin",
    type="PASSWORD",
    editables={"username": False, "secret": True},
)
BP_CRED_root = basic_cred(
    "root",
    BP_CRED_root_PASSWORD,
    name="root",
    type="PASSWORD",
    default=True,
    editables={"username": False, "secret": True},
)


class Service1(Service):

    pass


class vmcalm_timeResources(AhvVmResources):

    memory = 8
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "vmcalm_time_cloud_init_data.yaml")
    )


class vmcalm_time(AhvVm):

    name = "vm-@@{calm_time}@@"
    resources = vmcalm_timeResources


class svcBigIP(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "svcBigIP_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
    )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install License",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_InstallLicense.sh"
            ),
            cred=ref(BP_CRED_root),
            target=ref(Service1),
        )
        CalmTask.Exec.escript(
            name="Install AS3",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_InstallAS3.py"
            ),
            target=ref(Service1),
        )
        CalmTask.SetVariable.escript(
            name="Create Runbook Endpoint",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_CreateRunbookEndpoint.py",
            ),
            target=ref(Service1),
            variables=["endpoint_uuid"],
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="Revoke License",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___uninstall___Task_RevokeLicense.sh"
            ),
            cred=ref(BP_CRED_root),
            target=ref(Service1),
        )
        CalmTask.Exec.escript(
            name="Remove Runbook Endpoint",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_RemoveRunbookEndpoint.py",
            ),
            target=ref(Service1),
        )


class _2d1bb7e1_deployment(Deployment):

    name = "2d1bb7e1_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(svcBigIP)


class Default(Profile):

    deployments = [_2d1bb7e1_deployment]

    License = CalmVariable.Simple(
        "",
        label="License Key",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="Trial license available at: https://www.f5.com/trials/big-ip-virtual-edition\nLicense will be revoked if Application is deleted",
    )

    AS3 = CalmVariable.Simple(
        "https://github.com/F5Networks/f5-appsvcs-extension/releases/download/v3.22.1/f5-appsvcs-3.22.1-1.noarch.rpm",
        label="AS3 Extension Download Link",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="Find Releases under: https://github.com/F5Networks/f5-appsvcs-extension/releases",
    )


class f5BigIPLoadBalancer(Blueprint):
    """Basic Config f5 BigIP Virtual Edition, Single NIC"""

    services = [Service1]
    packages = [Package1]
    substrates = [svcBigIP]
    profiles = [Default]
    credentials = [BP_CRED_admin, BP_CRED_root]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
