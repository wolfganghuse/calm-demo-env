{"status":{},"contains_secrets":true,"product_version":"3.2.0","spec":{"description":"","resources":{"client_attrs":{},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7d68abcc_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"e787499b_runbook","main_task_local_reference":{"kind":"app_task","name":"7d68abcc_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"82d8a87c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"71ef459f_runbook","main_task_local_reference":{"kind":"app_task","name":"82d8a87c_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"aa2a9db2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4d820d46_runbook","main_task_local_reference":{"kind":"app_task","name":"aa2a9db2_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"92a8babc_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"c6b138ee_runbook","main_task_local_reference":{"kind":"app_task","name":"92a8babc_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ff6ee1f7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f797308e_runbook","main_task_local_reference":{"kind":"app_task","name":"ff6ee1f7_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Service1","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"FetchIPfromIPAM"},{"kind":"app_task","name":"Fetch NIC UUID"},{"kind":"app_task","name":"Create NIC JSON"},{"kind":"app_task","name":"FetchSubnetID"}],"name":"8352f8e6_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"FetchIPfromIPAM"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Fetch NIC UUID"}},{"from_task_reference":{"kind":"app_task","name":"Fetch NIC UUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create NIC JSON"}},{"from_task_reference":{"kind":"app_task","name":"FetchSubnetID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"FetchIPfromIPAM"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"FetchIPfromIPAM","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"{\"description\": \"@@{name}@@\"}","headers":[{"regex":{},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Token","value":"@@{phpIPAM_token}@@","label":"","state":"NOT_VALIDATED","attrs":{"type":""},"editables":{},"is_hidden":false,"message_list":[],"options":{}},{"regex":{},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Accept","value":"application\/json","label":"","state":"NOT_VALIDATED","attrs":{"type":""},"editables":{},"is_hidden":false,"message_list":[],"options":{}}],"url":"https:\/\/@@{phpIPAM_address}@@\/api\/Calm\/addresses\/first_free\/@@{phpipam_subnet_id}@@\/","response_paths":{"vm_ip":"$.data"},"retry_interval":1,"method":"POST","retry_count":1,"authentication":{"type":"none"},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"","proxy_type":""},"timeout_secs":"0","type":"HTTP","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Fetch NIC UUID","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"{}","headers":[],"url":"https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/subnets\/list","response_paths":{"subnet_uuid":"$.entities[?(@.status.name == \"@@{subnet}@@\")].metadata.uuid"},"retry_interval":1,"method":"POST","retry_count":1,"authentication":{"username":"admin","password":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"QJVZgs5ttUnzfyvmg2jV1Obb0Fz5aCFUzZkuxiT21bskXWMoMFAm3OLBUg==:utf-8"},"type":"basic"},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"","proxy_type":""},"timeout_secs":"0","type":"HTTP","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create NIC JSON","attrs":{"exit_status":[],"script":"subnet_ref={\n                \"kind\": \"subnet\",\n                \"uuid\": json.loads(\"@@{subnet_uuid}@@\")[0]\n              }\nprint 'subnet_ref=',json.dumps(subnet_ref)","eval_variables":["subnet_ref"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"FetchSubnetID","attrs":{"exit_status":[],"script":"#script\n#eScript\n\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Token': '@@{phpIPAM_token}@@'}\n#payload = \"{\\\"description\\\": \\\"lab201 Pod CIDR\\\"}\"\nurl = \"https:\/\/@@{phpIPAM_address}@@\/api\/Calm\/sections\/Customers\"\nresp = urlreq(url, verb='GET', headers=headers, verify=False)\nif resp.ok:\n    section_id = json.loads(resp.content)['data']['id']\n\n# If the call failed\nelse:\n    print(\"Call failed\"), json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\n# Fetch Subnet-IDs for LoadBalancer and POD\/Service CIDR\n\nurl = \"https:\/\/@@{phpIPAM_address}@@\/api\/Calm\/sections\/{0}\/subnets\".format(section_id)\nresp = urlreq(url, verb='GET', headers=headers, verify=False)\nif resp.ok:\n    for subnet in json.loads(resp.content)['data']:\n        if subnet['description'] == \"@@{subnet}@@\":\n            id = subnet['id']\n            print \"phpipam_subnet_id={0}\".format(id)\n            \n\n# If the call failed\nelse:\n        print(\"Call failed\"), json.dumps(json.loads(resp.content), indent=4)\n        exit(1)\n","eval_variables":["phpipam_subnet_id"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"f2bd06fb_runbook","main_task_local_reference":{"kind":"app_task","name":"8352f8e6_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Release IP"}],"name":"4535b79f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Webserver"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Release IP","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""},{"status":"SUCCESS","code":400,"type":""},{"status":"SUCCESS","code":500,"type":""}],"request_body":"","headers":[{"regex":{"should_validate":true,"value":""},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Token","value":"@@{phpIPAM_token}@@","label":"","state":"NOT_VALIDATED","attrs":{"type":""},"editables":{},"is_hidden":false,"message_list":[],"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":true,"value":""},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Accept","value":"application\/json","label":"","state":"NOT_VALIDATED","attrs":{"type":""},"editables":{},"is_hidden":false,"message_list":[],"options":{"type":"PREDEFINED","choices":[]}}],"url":"https:\/\/@@{phpIPAM_address}@@\/api\/Calm\/addresses\/@@{address}@@\/@@{phpipam_subnet_id}@@","response_paths":{},"retry_interval":1,"method":"DELETE","retry_count":1,"authentication":{"type":"none"},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"HTTP","proxy_type":""},"timeout_secs":"0","type":"HTTP","variable_list":[]}],"description":"","name":"7d0fd3f5_runbook","main_task_local_reference":{"kind":"app_task","name":"4535b79f_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Webserver","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"Cred_OS"}},"editables":{"create_spec":{"resources":{"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"webserver-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[{"ip":"@@{vm_ip}@@","type":"ASSIGNED"}],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"@@{subnet_ref.uuid}@@"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"\n\n#cloud-config\nusers:\n  - name: centos\n    ssh-authorized-keys:\n      - @@{Cred_OS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"8c4f7de3-544f-426d-98a2-40986fb657e4","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"CentOS7","uuid":"c7edd112-7b4a-42db-ba9a-0df17223857e"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":{"Backup-SLA":"Bronze"}},"variable_list":[]}],"credential_definition_list":[{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"U4KfHfbY2gJpNAn18UXcB6SJW3ma\/YYA4ZDeYMQrq14jlBe360VTbdLb78mTNcKjY9mhGPZwGvZk98mHMrAtp\/hZTTctw5jmC6KywZDPT2D\/mXNjQvRTThKa\/ScXKuMNok+xkfzYGo5uXlrxntW2I56G\/4gYgTqbJUzZSp\/GwSAsyTPz54zpPyrUabgILx1BLydgMJKAoay4qCbH9pexob3OA1MGvW1VElBe8EnlLD3TfFJWbVLnr6VGDU32y1fjcUMemLHk8vs39tK7YdIVDswur8sC2YML33DvsJ+H70esiErIxqM2evmAqv\/87JdFlyBoZsr1ZFlIKB91x2Brotu7KQ2bzAI4tOv\/yiZMLfhdl1H0dwodLNHIPXIRIq20l3HYRnFEt5YjFyQfwIsFygGOkb7sIImeKHmRmv4g33nxDhNHIoQHe5q6Szhb7SVShIF+\/Z+Rs4D6cForpvo6NrQxiWUWRZbkfX+R3bzhJLtb0qqlDqWaBNgKJvchzXYLuTbOZ2A2xgPOpdUe2ijF6qZybRhyQugCvPT66PewhJi+tiyqYhXrvNFw4vxY0SSXVEK5Akn1czQ1eQJOP6uy8mjyfOwa58Z5cqu2+BpvuQQ4SRrUFxYamz4gNcBmgPUaF570uiOVxahk2Pdurp9PqsfFeIIxlrScNpDNrGNrrhmobTWiAmg2ur3iMxMlaTUVKoON24jeyPhisYshn79Gryqn4D1RM5TikumzjqJdE6vA5itswcuqhVUXNnTyMHd\/A4cT1JLnymsEsp1scXZCpUI2y8V0pE4xPAXETWOuJ2vRrR1DVo1HfJ4Mn7e6r+nfK4WILyhT9VVftezPcZnz\/1MF1+PhNIYQWCCXtapUDikYmlcj58i0XIgDqRr3wA5zTqE6AfEKMhCLOlmUaIOesskA77jz4QK0gNFaBoFgXDKzvc01EJpDruy+8WbF230n9FNZLFFOSIE3ttUbNOCSkAannUI6H6PXPLKZH7FtFsCCZttEiVKDsPlrRxIeqHOWoUW+pgkphV\/GU4tWDzGWYHz++Bj3sfAlGgp4x1wHSZ4JDTP+gaf11uMlaUwzJHlRH+msGAMhVrXRdHUrPa4fkvhUlfPvyRLHaGWLhJoFTSvDvSekZDKuH9pkHVvLvN8jWahqaipriAdzzIemRltOfI0ufD7rI7+32kH9DlurTNxnSUWZwXc2uNCCKR0PdW\/m\/igCqz1Wl4oi9wvsgbxlUIVynYG8AbHrbAzsc\/7UhOZBCDFYpDrcRnvnEcEf93odK87DuxiNQ6T68WI5RexF3jPCaCkFy5+zkvlnoRRbISjbiLpsLGRRBS\/zS\/IGrlL8dxMiNtpCN17zzf6xv3L3NFuJqzAyt9LhShMcY8N6EChBvmlkMJmmDMK5fI3i5Ox\/JmayS+Wi7dnAeeqL9xcND5MW19pr2Ql9NdPd6Vja3kNrFeFnknlf3agOaLWeprLjj+JHiYe65qKQmXroY6i8Z+cYqlcISOzHOhnR\/dc8FuRi8tG1KAXiF1eeImiW2wCl8VCzdYIc6Tyb+UglK+lWx2IoeaPEh+WwzRiMZSA1KwCwkIK1RJSHoEu163qgdUhccf+ieMV3VjLEYk3c4TpcfLhtJMk6et4z8voYXKUT8I6vaanoSGyz0GyEMAUI1vQ04nL\/EN1iomcVXamIeknrLfpVQaWTGTVThnQLgvoY9LnO2SHnyLAvcGcrecF2nnHFRwkAo3qMnDe+EKTXjdT6HAylPjadxi7hEdJACMaRHA21gzuVU7BSNEJbXpACqUp6s23J3qKx334z4baknJKBmMii9e7BZjUdjJBoBhEDDPfOQ5SawouTQeK3nytKe3qpi5BJmRtRfkSUlufwXJBj3KWbpktR+PEMRcWexSWKnBhn3C+JgRbpO\/c7R87tQgcbnjA1FVzs\/rgmR18JvTtbcteJIVCS1uoXrvPXKvCmCYU6+udsB\/JjY7soPFiNLkp0r9Ca4+l337Fd6LVNA\/m4YnWMJSJynTwTG\/VE5LCMgJfFtKITEE5Npz6F38d\/dAk6T+mBZ5FyJY3+VUbQEMgz8v4qHjnbGHyt6VV1UY6nVa8SlFPKJMMdMBlHmdSc\/8DbxAAoub1\/PASoXnDX98hwXHfYjs8YDyVhKpCzaX8JZ4Ko9sY5N+qCwc6z9J4yZJf5iGzKcB5XXSRBPqoCfqWAvbFnYhcgll8qL4Gs91AXW1VQAz+pO8waKGCS\/5X4f78UD4QqSdopBGZ+WnDgDWzH80GXPAuL8uMrcPj3yX8W:utf-8"},"name":"Cred_OS"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"ik2mxSU5FqJTDx0soc5yDURLfAgsT9le5WNjhaD+yterdlKpccYl3Iu9:utf-8"},"name":"fortigate"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Service1"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Install"},{"kind":"app_task","name":"Firewall"},{"kind":"app_task","name":"Forti_AddIP"},{"kind":"app_task","name":"Forti_UpdateGroup"}],"name":"969a8ee8_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Firewall"}},{"from_task_reference":{"kind":"app_task","name":"Firewall"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Forti_AddIP"}},{"from_task_reference":{"kind":"app_task","name":"Forti_AddIP"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Forti_UpdateGroup"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Install","attrs":{"exit_status":[],"script":"sudo yum -y install httpd\n\nsudo service httpd start\nsudo chkconfig httpd on\n\n\n\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Cred_OS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Firewall","attrs":{"exit_status":[],"script":"if systemctl list-units --type=service | grep -Fq 'firewalld'; then   \n  sudo firewall-cmd --add-service=http\n  sudo firewall-cmd --add-service=https\n  sudo firewall-cmd --runtime-to-permanent\nfi\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Cred_OS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Forti_AddIP","attrs":{"script":"# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0\/03032020 - initial version\n# task_name:    FortigateCreateIpv4\n# description:  Create an ipv4 address\n# input vars:   vm_name, vm_ip\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{platform.spec.name}@@\"\nvm_ip = \"@@{address}@@\"\nfortigate_vdom = \"root\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/logincheck\"\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'application\/json'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_create_ip(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vm_name, vm_ip, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/api\/v2\/cmdb\/firewall\/address?&vdom=\" + vdom\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Accept': '*\/*',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n    create_payload = {\"name\": vm_name, \"subnet\": vm_ip + \" 255.255.255.255\"}\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_create_ip(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vm_name, vm_ip, fortigate_vdom)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Forti_UpdateGroup","attrs":{"script":"# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0\/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{platform.spec.name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"Webserver\"\nfortigate_vdom = \"root\"\naction = \"add\"\n# endregion\n\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/logincheck\"\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain\/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/api\/v2\/cmdb\/firewall\/addrgrp\/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application\/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application\/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"6a26dd18_runbook","main_task_local_reference":{"kind":"app_task","name":"969a8ee8_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Forti_UpdateGroup"}],"name":"1a2afa15_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Forti_UpdateGroup","attrs":{"script":"# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0\/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{platform.spec.name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"Webserver\"\nfortigate_vdom = \"root\"\naction = \"delete\"\n# endregion\n\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/logincheck\"\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain\/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"\/api\/v2\/cmdb\/firewall\/addrgrp\/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http:\/\/{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application\/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove({'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application\/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result\/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d1047c21_runbook","main_task_local_reference":{"kind":"app_task","name":"1a2afa15_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"d5d66387_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"Webserver"},"variable_list":[],"description":""}],"environment_reference_list":["8954274b-fb3d-938c-059b-d5010e0096fc"],"description":"","action_list":[],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"HTTP_LOCAL","name":"subnet","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"HTTP","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"{}","headers":[],"url":"https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/subnets\/list","response_paths":{"subnet":"$.entities.status.name"},"retry_interval":1,"method":"POST","retry_count":1,"authentication":{"username":"admin","password":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"dUWbxqH59zYw68WaF0rlaRjgihLCD6nR3R0keaGfRcm2jEW8SqA0bVXVJA==:utf-8"},"type":"basic"},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"HTTP","proxy_type":""}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"fortigate_endpoint","value":"10.200.100.159","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"phpIPAM_token","value":"SHXjM3oX1lCA+H5buRVvjF5AFdMlRcHAj\/mquwS8YMDp9Z5RmttE146EbPAB7jQ3BBIQikZ+sLzTtQYQKHKxwQ==:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"phpIPAM_address","value":"10.200.100.160","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Cred_OS"},"type":"USER"},"name":"Linux Webserver"},"api_version":"3.0","metadata":{"last_update_time":"1618479663856353","kind":"blueprint","spec_version":67,"creation_time":"1611907882814198","categories":{"TemplateType":"Vm"},"name":"Linux Webserver"}}