# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_cred_os_KEY = read_local_file("BP_CRED_cred_os_KEY")

# Credentials
BP_CRED_cred_os = basic_cred(
    "centos",
    BP_CRED_cred_os_KEY,
    name="cred_os",
    type="KEY",
    default=True,
)


class Service1(Service):

    pass


class vmcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("CentOS7", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "vmcalm_time_cloud_init_data.yaml")
    )


class vmcalm_time(AhvVm):

    name = "vm-@@{calm_time}@@"
    resources = vmcalm_timeResources


class svc_phpIPAM(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "svc_phpIPAM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_cred_os),
    )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install_Packages",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_Install_Packages.sh",
            ),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="Config_httpd",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Config_httpd.sh"
            ),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="Enable_Services",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Enable_Services.sh"
            ),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="Config_phpIPAM",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Config_phpIPAM.sh"
            ),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="Enable_SSL",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Enable_SSL.sh"
            ),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="Create_Database",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Create_Database.sh"
            ),
            target=ref(Service1),
        )


class _98854c90_deployment(Deployment):

    name = "98854c90_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(svc_phpIPAM)


class Default(Profile):

    deployments = [_98854c90_deployment]

    mariadb_rootpwd = CalmVariable.Simple(
        "Nutanix/4u",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )


class phpIPAM(Blueprint):
    """Create phpIPAM 1.4 from Scratch
    Default Login: admin/ipamadmin"""

    services = [Service1]
    packages = [Package1]
    substrates = [svc_phpIPAM]
    profiles = [Default]
    credentials = [BP_CRED_cred_os]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
