# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_Cred_OS_PASSWORD = read_local_file("BP_CRED_Cred_OS_PASSWORD")

# Credentials
BP_CRED_Cred_OS = basic_cred(
    "centos",
    BP_CRED_Cred_OS_PASSWORD,
    name="Cred_OS",
    type="PASSWORD",
    default=True,
)


CENTOS7 = vm_disk_package(
    name="CENTOS7",
    description="",
    config={
        "name": "CENTOS7",
        "image": {
            "name": "CENTOS7",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-1908.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "", "version": ""},
        "checksum": {},
    },
)


class Service1(Service):

    pass


class snowmidcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(CENTOS7, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "snowmidcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class snowmidcalm_array_indexcalm_time(AhvVm):

    name = "snowmid-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = snowmidcalm_array_indexcalm_timeResources


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = snowmidcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "VM1_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_Cred_OS),
    )

    @action
    def __pre_create__():

        CalmTask.Exec.escript(
            name="CreateSnowUser",
            filename=os.path.join(
                "scripts", "Substrate_VM1_Action___pre_create___Task_CreateSnowUser.py"
            ),
            target=ref(VM1),
        )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="InstallSelenium",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_InstallSelenium.sh"
            ),
            cred=ref(BP_CRED_Cred_OS),
            target=ref(Service1),
        )
        CalmTask.Exec.ssh(
            name="DownloadMidServer",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_DownloadMidServer.sh",
            ),
            cred=ref(BP_CRED_Cred_OS),
            target=ref(Service1),
        )


class b39046ae_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [b39046ae_deployment]

    Snow_Instance = CalmVariable.Simple(
        "dev103029.service-now.com",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    AdminPassword = CalmVariable.Simple(
        "nx2Tech100!",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class SNowMidserver(Blueprint):

    services = [Service1]
    packages = [Package1, CENTOS7]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_Cred_OS]
