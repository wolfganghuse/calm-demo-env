# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_cred_centos_password_PASSWORD = read_local_file(
    "BP_CRED_cred_centos_password_PASSWORD"
)
BP_CRED_cred_centos_key_KEY = read_local_file("BP_CRED_cred_centos_key_KEY")

# Credentials
BP_CRED_cred_centos_password = basic_cred(
    "centos",
    BP_CRED_cred_centos_password_PASSWORD,
    name="cred_centos_password",
    type="PASSWORD",
    default=True,
)
BP_CRED_cred_centos_key = basic_cred(
    "centos",
    BP_CRED_cred_centos_key_KEY,
    name="cred_centos_key",
    type="KEY",
)


class PREFIXService(Service):

    name = "Service"

    pass


class PREFIXcalm_application_nameResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("CentOS7", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "PREFIXcalm_application_name_cloud_init_data.yaml"
        )
    )


class PREFIXcalm_application_name(AhvVm):

    name = "@@{calm_application_name}@@"
    resources = PREFIXcalm_application_nameResources
    categories = {"Environment": "Dev"}


class PREFIXCentOSAHV(Substrate):

    name = "CentOSAHV"
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = PREFIXcalm_application_name
    provider_spec_editables = read_spec(
        os.path.join("specs", "PREFIXCentOSAHV_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_cred_centos_key),
    )


class PREFIXPackage(Package):

    name = "Package"
    services = [ref(PREFIXService)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install Terraform",
            filename=os.path.join(
                "scripts",
                "Package_PREFIXPackage_Action___install___Task_PREFIXInstallTerraform.sh",
            ),
            target=ref(PREFIXService),
        )
        CalmTask.SetVariable.escript(
            name="Create Endpoint",
            filename=os.path.join(
                "scripts",
                "Package_PREFIXPackage_Action___install___Task_PREFIXCreateEndpoint.py",
            ),
            target=ref(PREFIXService),
            variables=["endpoint_uuid"],
        )

    @action
    def __uninstall__():

        CalmTask.Exec.escript(
            name="Remove Endpoint",
            filename=os.path.join(
                "scripts",
                "Package_PREFIXPackage_Action___uninstall___Task_PREFIXRemoveEndpoint.py",
            ),
            target=ref(PREFIXService),
        )


class PREFIX_89a88d1e_deployment(Deployment):

    name = "89a88d1e_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(PREFIXPackage)]
    substrate = ref(PREFIXCentOSAHV)


class PREFIXDefault(Profile):

    name = "Default"
    deployments = [PREFIX_89a88d1e_deployment]


class TerraformHost(Blueprint):

    services = [PREFIXService]
    packages = [PREFIXPackage]
    substrates = [PREFIXCentOSAHV]
    profiles = [PREFIXDefault]
    credentials = [BP_CRED_cred_centos_password, BP_CRED_cred_centos_key]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
