# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_centos_ssh_KEY = read_local_file("BP_CRED_centos_ssh_KEY")
BP_CRED_PrismElement_PASSWORD = read_local_file("BP_CRED_PrismElement_PASSWORD")

# Credentials
BP_CRED_centos_ssh = basic_cred(
    "centos",
    BP_CRED_centos_ssh_KEY,
    name="centos_ssh",
    type="KEY",
    default=True,
)
BP_CRED_PrismElement = basic_cred(
    "wolfgang@ntnx.test",
    BP_CRED_PrismElement_PASSWORD,
    name="PrismElement",
    type="PASSWORD",
)


class k3s_service(Service):

    MasterToken = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    Node2Remove = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def Remove_Worker():

        CalmTask.Exec.ssh(
            name="Remove_Worker",
            filename=os.path.join(
                "scripts",
                "Service_k3s_service_Action_Remove_Worker_Task_Remove_Worker.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )


class k3scalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("CentOS7", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("NTNX-DEMO01_IPAM", cluster="NTNX-DEMO01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "k3scalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class k3scalm_array_indexcalm_time(AhvVm):

    name = "k3s-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = k3scalm_array_indexcalm_timeResources


class k3s(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = k3scalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "k3s_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_centos_ssh),
    )


class Package1(Package):

    services = [ref(k3s_service)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Prerequisites",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Prerequisites.sh"
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.Exec.ssh(
            name="install_k3sServer",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_install_k3sServer.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.Exec.ssh(
            name="install_k3sAgent",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_install_k3sAgent.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.Exec.ssh(
            name="install_NutanixCSi",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_install_NutanixCSi.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.Exec.ssh(
            name="create_NTNXSecret",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_create_NTNXSecret.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.Exec.ssh(
            name="create_StorageClass",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_create_StorageClass.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
        )
        CalmTask.SetVariable.ssh(
            name="Set_MasterToken",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_Set_MasterToken.sh"
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
            variables=["MasterToken"],
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.ssh(
            name="SetNode2Remove",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_SetNode2Remove.sh",
            ),
            cred=ref(BP_CRED_centos_ssh),
            target=ref(k3s_service),
            variables=["Node2Remove"],
        )


class _7362c5a5_deployment(Deployment):

    name = "7362c5a5_deployment"
    min_replicas = "1"
    max_replicas = "10"

    packages = [ref(Package1)]
    substrate = ref(k3s)


class Default(Profile):

    deployments = [_7362c5a5_deployment]

    INSTANCE_PUBLIC_KEY = CalmVariable.Simple(
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqCc1QrIA7dEmuIcN7BLkEyvFx6GR1zteLdo0ep8PaJIbNhdYq4rSy9wrrmsaRl5MrWiP0oey4ffmqrZKCqiihUx3iMX+J1GNL2ZsvYaI5EIHA4y8ML23n64PTmqH8SW+n+hprRe3T13mUBSvhKjzVlGROQS8GHW6Bc5ULiBZQNwccs9OjD6vVgNqsHNODz3uMCC0FR5IHWrhzNgqZXnaGNuz16nIAHsHpNvUc8PIBg9ElstOMCguq5cAyntN2eXs8YQXP29uJPiTjxyTh35T5eFCkkxWqPlBF23QPnCFgCk6hC3epv/stIbZnpCgYR4e7epwZDQDyrPwT3hBYcrxT centos@nutanix.com",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PrismElement_IP = CalmVariable.Simple(
        "172.23.1.112",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PrismElement_Port = CalmVariable.Simple(
        "9440",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PrismElement_DataIP = CalmVariable.Simple(
        "172.23.1.113",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    CSI_StorageContainer = CalmVariable.Simple(
        "k3s",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    CSI_fsType = CalmVariable.WithOptions(
        ["xfs", "ext4"],
        label="",
        default="xfs",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOutWorker(name="Scale Out Worker"):

        CalmTask.Scaling.scale_out(
            "1", name="Scale Out", target=ref(_7362c5a5_deployment)
        )

    @action
    def ScaleInWorker(name="Scale In Worker"):

        CalmTask.Scaling.scale_in(
            "1", name="Scale In Task", target=ref(_7362c5a5_deployment)
        )
        k3s_service.Remove_Worker(name="Remove_Worker")


class k3s(Blueprint):
    """Provides a small k3s Environment, able to scale up/down"""

    services = [k3s_service]
    packages = [Package1]
    substrates = [k3s]
    profiles = [Default]
    credentials = [BP_CRED_centos_ssh, BP_CRED_PrismElement]
